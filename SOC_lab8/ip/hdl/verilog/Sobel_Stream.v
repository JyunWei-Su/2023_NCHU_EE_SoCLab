// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Sobel_Stream,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.050250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=1477,HLS_SYN_LUT=2987,HLS_VERSION=2019_1}" *)

module Sobel_Stream (
        ap_clk,
        ap_rst_n,
        p_src_TDATA,
        p_src_TVALID,
        p_src_TREADY,
        p_src_TKEEP,
        p_src_TSTRB,
        p_src_TUSER,
        p_src_TLAST,
        p_src_TID,
        p_src_TDEST,
        p_dst_TDATA,
        p_dst_TVALID,
        p_dst_TREADY,
        p_dst_TKEEP,
        p_dst_TSTRB,
        p_dst_TUSER,
        p_dst_TLAST,
        p_dst_TID,
        p_dst_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] p_src_TDATA;
input   p_src_TVALID;
output   p_src_TREADY;
input  [0:0] p_src_TKEEP;
input  [0:0] p_src_TSTRB;
input  [0:0] p_src_TUSER;
input  [0:0] p_src_TLAST;
input  [0:0] p_src_TID;
input  [0:0] p_src_TDEST;
output  [7:0] p_dst_TDATA;
output   p_dst_TVALID;
input   p_dst_TREADY;
output  [0:0] p_dst_TKEEP;
output  [0:0] p_dst_TSTRB;
output  [0:0] p_dst_TUSER;
output  [0:0] p_dst_TLAST;
output  [0:0] p_dst_TID;
output  [0:0] p_dst_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] p_src_V_data_V_0_data_out;
wire    p_src_V_data_V_0_vld_in;
wire    p_src_V_data_V_0_vld_out;
wire    p_src_V_data_V_0_ack_in;
reg    p_src_V_data_V_0_ack_out;
reg   [7:0] p_src_V_data_V_0_payload_A;
reg   [7:0] p_src_V_data_V_0_payload_B;
reg    p_src_V_data_V_0_sel_rd;
reg    p_src_V_data_V_0_sel_wr;
wire    p_src_V_data_V_0_sel;
wire    p_src_V_data_V_0_load_A;
wire    p_src_V_data_V_0_load_B;
reg   [1:0] p_src_V_data_V_0_state;
wire    p_src_V_data_V_0_state_cmp_full;
reg   [0:0] p_src_V_keep_V_0_data_out;
wire    p_src_V_keep_V_0_vld_in;
wire    p_src_V_keep_V_0_vld_out;
wire    p_src_V_keep_V_0_ack_in;
reg    p_src_V_keep_V_0_ack_out;
reg   [0:0] p_src_V_keep_V_0_payload_A;
reg   [0:0] p_src_V_keep_V_0_payload_B;
reg    p_src_V_keep_V_0_sel_rd;
reg    p_src_V_keep_V_0_sel_wr;
wire    p_src_V_keep_V_0_sel;
wire    p_src_V_keep_V_0_load_A;
wire    p_src_V_keep_V_0_load_B;
reg   [1:0] p_src_V_keep_V_0_state;
wire    p_src_V_keep_V_0_state_cmp_full;
reg   [0:0] p_src_V_strb_V_0_data_out;
wire    p_src_V_strb_V_0_vld_in;
wire    p_src_V_strb_V_0_vld_out;
wire    p_src_V_strb_V_0_ack_in;
reg    p_src_V_strb_V_0_ack_out;
reg   [0:0] p_src_V_strb_V_0_payload_A;
reg   [0:0] p_src_V_strb_V_0_payload_B;
reg    p_src_V_strb_V_0_sel_rd;
reg    p_src_V_strb_V_0_sel_wr;
wire    p_src_V_strb_V_0_sel;
wire    p_src_V_strb_V_0_load_A;
wire    p_src_V_strb_V_0_load_B;
reg   [1:0] p_src_V_strb_V_0_state;
wire    p_src_V_strb_V_0_state_cmp_full;
reg   [0:0] p_src_V_user_V_0_data_out;
wire    p_src_V_user_V_0_vld_in;
wire    p_src_V_user_V_0_vld_out;
wire    p_src_V_user_V_0_ack_in;
reg    p_src_V_user_V_0_ack_out;
reg   [0:0] p_src_V_user_V_0_payload_A;
reg   [0:0] p_src_V_user_V_0_payload_B;
reg    p_src_V_user_V_0_sel_rd;
reg    p_src_V_user_V_0_sel_wr;
wire    p_src_V_user_V_0_sel;
wire    p_src_V_user_V_0_load_A;
wire    p_src_V_user_V_0_load_B;
reg   [1:0] p_src_V_user_V_0_state;
wire    p_src_V_user_V_0_state_cmp_full;
reg   [0:0] p_src_V_last_V_0_data_out;
wire    p_src_V_last_V_0_vld_in;
wire    p_src_V_last_V_0_vld_out;
wire    p_src_V_last_V_0_ack_in;
reg    p_src_V_last_V_0_ack_out;
reg   [0:0] p_src_V_last_V_0_payload_A;
reg   [0:0] p_src_V_last_V_0_payload_B;
reg    p_src_V_last_V_0_sel_rd;
reg    p_src_V_last_V_0_sel_wr;
wire    p_src_V_last_V_0_sel;
wire    p_src_V_last_V_0_load_A;
wire    p_src_V_last_V_0_load_B;
reg   [1:0] p_src_V_last_V_0_state;
wire    p_src_V_last_V_0_state_cmp_full;
reg   [0:0] p_src_V_id_V_0_data_out;
wire    p_src_V_id_V_0_vld_in;
wire    p_src_V_id_V_0_vld_out;
wire    p_src_V_id_V_0_ack_in;
reg    p_src_V_id_V_0_ack_out;
reg   [0:0] p_src_V_id_V_0_payload_A;
reg   [0:0] p_src_V_id_V_0_payload_B;
reg    p_src_V_id_V_0_sel_rd;
reg    p_src_V_id_V_0_sel_wr;
wire    p_src_V_id_V_0_sel;
wire    p_src_V_id_V_0_load_A;
wire    p_src_V_id_V_0_load_B;
reg   [1:0] p_src_V_id_V_0_state;
wire    p_src_V_id_V_0_state_cmp_full;
reg   [0:0] p_src_V_dest_V_0_data_out;
wire    p_src_V_dest_V_0_vld_in;
wire    p_src_V_dest_V_0_vld_out;
wire    p_src_V_dest_V_0_ack_in;
reg    p_src_V_dest_V_0_ack_out;
reg   [0:0] p_src_V_dest_V_0_payload_A;
reg   [0:0] p_src_V_dest_V_0_payload_B;
reg    p_src_V_dest_V_0_sel_rd;
reg    p_src_V_dest_V_0_sel_wr;
wire    p_src_V_dest_V_0_sel;
wire    p_src_V_dest_V_0_load_A;
wire    p_src_V_dest_V_0_load_B;
reg   [1:0] p_src_V_dest_V_0_state;
wire    p_src_V_dest_V_0_state_cmp_full;
reg   [7:0] p_dst_V_data_V_1_data_out;
wire    p_dst_V_data_V_1_vld_in;
wire    p_dst_V_data_V_1_vld_out;
wire    p_dst_V_data_V_1_ack_in;
wire    p_dst_V_data_V_1_ack_out;
reg   [7:0] p_dst_V_data_V_1_payload_A;
reg   [7:0] p_dst_V_data_V_1_payload_B;
reg    p_dst_V_data_V_1_sel_rd;
reg    p_dst_V_data_V_1_sel_wr;
wire    p_dst_V_data_V_1_sel;
wire    p_dst_V_data_V_1_load_A;
wire    p_dst_V_data_V_1_load_B;
reg   [1:0] p_dst_V_data_V_1_state;
wire    p_dst_V_data_V_1_state_cmp_full;
reg   [0:0] p_dst_V_keep_V_1_data_out;
wire    p_dst_V_keep_V_1_vld_in;
wire    p_dst_V_keep_V_1_vld_out;
wire    p_dst_V_keep_V_1_ack_in;
wire    p_dst_V_keep_V_1_ack_out;
reg   [0:0] p_dst_V_keep_V_1_payload_A;
reg   [0:0] p_dst_V_keep_V_1_payload_B;
reg    p_dst_V_keep_V_1_sel_rd;
reg    p_dst_V_keep_V_1_sel_wr;
wire    p_dst_V_keep_V_1_sel;
wire    p_dst_V_keep_V_1_load_A;
wire    p_dst_V_keep_V_1_load_B;
reg   [1:0] p_dst_V_keep_V_1_state;
wire    p_dst_V_keep_V_1_state_cmp_full;
reg   [0:0] p_dst_V_strb_V_1_data_out;
wire    p_dst_V_strb_V_1_vld_in;
wire    p_dst_V_strb_V_1_vld_out;
wire    p_dst_V_strb_V_1_ack_in;
wire    p_dst_V_strb_V_1_ack_out;
reg   [0:0] p_dst_V_strb_V_1_payload_A;
reg   [0:0] p_dst_V_strb_V_1_payload_B;
reg    p_dst_V_strb_V_1_sel_rd;
reg    p_dst_V_strb_V_1_sel_wr;
wire    p_dst_V_strb_V_1_sel;
wire    p_dst_V_strb_V_1_load_A;
wire    p_dst_V_strb_V_1_load_B;
reg   [1:0] p_dst_V_strb_V_1_state;
wire    p_dst_V_strb_V_1_state_cmp_full;
reg   [0:0] p_dst_V_user_V_1_data_out;
wire    p_dst_V_user_V_1_vld_in;
wire    p_dst_V_user_V_1_vld_out;
wire    p_dst_V_user_V_1_ack_in;
wire    p_dst_V_user_V_1_ack_out;
reg   [0:0] p_dst_V_user_V_1_payload_A;
reg   [0:0] p_dst_V_user_V_1_payload_B;
reg    p_dst_V_user_V_1_sel_rd;
reg    p_dst_V_user_V_1_sel_wr;
wire    p_dst_V_user_V_1_sel;
wire    p_dst_V_user_V_1_load_A;
wire    p_dst_V_user_V_1_load_B;
reg   [1:0] p_dst_V_user_V_1_state;
wire    p_dst_V_user_V_1_state_cmp_full;
reg   [0:0] p_dst_V_last_V_1_data_out;
wire    p_dst_V_last_V_1_vld_in;
wire    p_dst_V_last_V_1_vld_out;
wire    p_dst_V_last_V_1_ack_in;
wire    p_dst_V_last_V_1_ack_out;
reg   [0:0] p_dst_V_last_V_1_payload_A;
reg   [0:0] p_dst_V_last_V_1_payload_B;
reg    p_dst_V_last_V_1_sel_rd;
reg    p_dst_V_last_V_1_sel_wr;
wire    p_dst_V_last_V_1_sel;
wire    p_dst_V_last_V_1_load_A;
wire    p_dst_V_last_V_1_load_B;
reg   [1:0] p_dst_V_last_V_1_state;
wire    p_dst_V_last_V_1_state_cmp_full;
reg   [0:0] p_dst_V_id_V_1_data_out;
wire    p_dst_V_id_V_1_vld_in;
wire    p_dst_V_id_V_1_vld_out;
wire    p_dst_V_id_V_1_ack_in;
wire    p_dst_V_id_V_1_ack_out;
reg   [0:0] p_dst_V_id_V_1_payload_A;
reg   [0:0] p_dst_V_id_V_1_payload_B;
reg    p_dst_V_id_V_1_sel_rd;
reg    p_dst_V_id_V_1_sel_wr;
wire    p_dst_V_id_V_1_sel;
wire    p_dst_V_id_V_1_load_A;
wire    p_dst_V_id_V_1_load_B;
reg   [1:0] p_dst_V_id_V_1_state;
wire    p_dst_V_id_V_1_state_cmp_full;
reg   [0:0] p_dst_V_dest_V_1_data_out;
wire    p_dst_V_dest_V_1_vld_in;
wire    p_dst_V_dest_V_1_vld_out;
wire    p_dst_V_dest_V_1_ack_in;
wire    p_dst_V_dest_V_1_ack_out;
reg   [0:0] p_dst_V_dest_V_1_payload_A;
reg   [0:0] p_dst_V_dest_V_1_payload_B;
reg    p_dst_V_dest_V_1_sel_rd;
reg    p_dst_V_dest_V_1_sel_wr;
wire    p_dst_V_dest_V_1_sel;
wire    p_dst_V_dest_V_1_load_A;
wire    p_dst_V_dest_V_1_load_B;
reg   [1:0] p_dst_V_dest_V_1_state;
wire    p_dst_V_dest_V_1_state_cmp_full;
wire   [31:0] height;
wire   [31:0] width;
reg   [31:0] width_read_reg_141;
wire    ap_CS_fsm_state2;
reg   [31:0] height_read_reg_148;
reg   [11:0] p_ImgInput_data_V_address0;
reg    p_ImgInput_data_V_ce0;
reg    p_ImgInput_data_V_we0;
wire   [7:0] p_ImgInput_data_V_q0;
reg   [11:0] p_ImgSobelx_data_V_address0;
reg    p_ImgSobelx_data_V_ce0;
reg    p_ImgSobelx_data_V_we0;
wire   [7:0] p_ImgSobelx_data_V_q0;
wire    grp_Sobel_fu_88_ap_start;
wire    grp_Sobel_fu_88_ap_done;
wire    grp_Sobel_fu_88_ap_idle;
wire    grp_Sobel_fu_88_ap_ready;
wire   [11:0] grp_Sobel_fu_88_p_src_mat_data_V_address0;
wire    grp_Sobel_fu_88_p_src_mat_data_V_ce0;
wire   [11:0] grp_Sobel_fu_88_p_dst_matx_data_V_address0;
wire    grp_Sobel_fu_88_p_dst_matx_data_V_ce0;
wire    grp_Sobel_fu_88_p_dst_matx_data_V_we0;
wire   [7:0] grp_Sobel_fu_88_p_dst_matx_data_V_d0;
wire   [11:0] grp_Sobel_fu_88_p_dst_maty_data_V_address0;
wire    grp_Sobel_fu_88_p_dst_maty_data_V_ce0;
wire    grp_Sobel_fu_88_p_dst_maty_data_V_we0;
wire   [7:0] grp_Sobel_fu_88_p_dst_maty_data_V_d0;
wire    grp_xfMat2AXIvideo_fu_97_ap_start;
wire    grp_xfMat2AXIvideo_fu_97_ap_done;
wire    grp_xfMat2AXIvideo_fu_97_ap_idle;
wire    grp_xfMat2AXIvideo_fu_97_ap_ready;
wire   [11:0] grp_xfMat2AXIvideo_fu_97_img_data_V_address0;
wire    grp_xfMat2AXIvideo_fu_97_img_data_V_ce0;
wire   [7:0] grp_xfMat2AXIvideo_fu_97_p_dst_TDATA;
wire    grp_xfMat2AXIvideo_fu_97_p_dst_TVALID;
wire    grp_xfMat2AXIvideo_fu_97_p_dst_TREADY;
wire   [0:0] grp_xfMat2AXIvideo_fu_97_p_dst_TKEEP;
wire   [0:0] grp_xfMat2AXIvideo_fu_97_p_dst_TSTRB;
wire   [0:0] grp_xfMat2AXIvideo_fu_97_p_dst_TUSER;
wire   [0:0] grp_xfMat2AXIvideo_fu_97_p_dst_TLAST;
wire   [0:0] grp_xfMat2AXIvideo_fu_97_p_dst_TID;
wire   [0:0] grp_xfMat2AXIvideo_fu_97_p_dst_TDEST;
wire    grp_AXIvideo2xfMat_fu_118_ap_start;
wire    grp_AXIvideo2xfMat_fu_118_ap_done;
wire    grp_AXIvideo2xfMat_fu_118_ap_idle;
wire    grp_AXIvideo2xfMat_fu_118_ap_ready;
wire    grp_AXIvideo2xfMat_fu_118_p_src_TVALID;
wire    grp_AXIvideo2xfMat_fu_118_p_src_TREADY;
wire   [11:0] grp_AXIvideo2xfMat_fu_118_img_data_V_address0;
wire    grp_AXIvideo2xfMat_fu_118_img_data_V_ce0;
wire    grp_AXIvideo2xfMat_fu_118_img_data_V_we0;
wire   [7:0] grp_AXIvideo2xfMat_fu_118_img_data_V_d0;
reg    grp_Sobel_fu_88_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    grp_xfMat2AXIvideo_fu_97_ap_start_reg;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg    grp_AXIvideo2xfMat_fu_118_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state8;
reg    ap_block_state8;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 p_src_V_data_V_0_sel_rd = 1'b0;
#0 p_src_V_data_V_0_sel_wr = 1'b0;
#0 p_src_V_data_V_0_state = 2'd0;
#0 p_src_V_keep_V_0_sel_rd = 1'b0;
#0 p_src_V_keep_V_0_sel_wr = 1'b0;
#0 p_src_V_keep_V_0_state = 2'd0;
#0 p_src_V_strb_V_0_sel_rd = 1'b0;
#0 p_src_V_strb_V_0_sel_wr = 1'b0;
#0 p_src_V_strb_V_0_state = 2'd0;
#0 p_src_V_user_V_0_sel_rd = 1'b0;
#0 p_src_V_user_V_0_sel_wr = 1'b0;
#0 p_src_V_user_V_0_state = 2'd0;
#0 p_src_V_last_V_0_sel_rd = 1'b0;
#0 p_src_V_last_V_0_sel_wr = 1'b0;
#0 p_src_V_last_V_0_state = 2'd0;
#0 p_src_V_id_V_0_sel_rd = 1'b0;
#0 p_src_V_id_V_0_sel_wr = 1'b0;
#0 p_src_V_id_V_0_state = 2'd0;
#0 p_src_V_dest_V_0_sel_rd = 1'b0;
#0 p_src_V_dest_V_0_sel_wr = 1'b0;
#0 p_src_V_dest_V_0_state = 2'd0;
#0 p_dst_V_data_V_1_sel_rd = 1'b0;
#0 p_dst_V_data_V_1_sel_wr = 1'b0;
#0 p_dst_V_data_V_1_state = 2'd0;
#0 p_dst_V_keep_V_1_sel_rd = 1'b0;
#0 p_dst_V_keep_V_1_sel_wr = 1'b0;
#0 p_dst_V_keep_V_1_state = 2'd0;
#0 p_dst_V_strb_V_1_sel_rd = 1'b0;
#0 p_dst_V_strb_V_1_sel_wr = 1'b0;
#0 p_dst_V_strb_V_1_state = 2'd0;
#0 p_dst_V_user_V_1_sel_rd = 1'b0;
#0 p_dst_V_user_V_1_sel_wr = 1'b0;
#0 p_dst_V_user_V_1_state = 2'd0;
#0 p_dst_V_last_V_1_sel_rd = 1'b0;
#0 p_dst_V_last_V_1_sel_wr = 1'b0;
#0 p_dst_V_last_V_1_state = 2'd0;
#0 p_dst_V_id_V_1_sel_rd = 1'b0;
#0 p_dst_V_id_V_1_sel_wr = 1'b0;
#0 p_dst_V_id_V_1_state = 2'd0;
#0 p_dst_V_dest_V_1_sel_rd = 1'b0;
#0 p_dst_V_dest_V_1_sel_wr = 1'b0;
#0 p_dst_V_dest_V_1_state = 2'd0;
#0 grp_Sobel_fu_88_ap_start_reg = 1'b0;
#0 grp_xfMat2AXIvideo_fu_97_ap_start_reg = 1'b0;
#0 grp_AXIvideo2xfMat_fu_118_ap_start_reg = 1'b0;
end

Sobel_Stream_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
Sobel_Stream_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .height(height),
    .width(width)
);

Sobel_Stream_p_ImfYi #(
    .DataWidth( 8 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
p_ImgInput_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p_ImgInput_data_V_address0),
    .ce0(p_ImgInput_data_V_ce0),
    .we0(p_ImgInput_data_V_we0),
    .d0(grp_AXIvideo2xfMat_fu_118_img_data_V_d0),
    .q0(p_ImgInput_data_V_q0)
);

Sobel_Stream_p_ImfYi #(
    .DataWidth( 8 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
p_ImgSobelx_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p_ImgSobelx_data_V_address0),
    .ce0(p_ImgSobelx_data_V_ce0),
    .we0(p_ImgSobelx_data_V_we0),
    .d0(grp_Sobel_fu_88_p_dst_matx_data_V_d0),
    .q0(p_ImgSobelx_data_V_q0)
);

Sobel_Stream_p_Imhbi #(
    .DataWidth( 8 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
p_ImgSobely_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_Sobel_fu_88_p_dst_maty_data_V_address0),
    .ce0(grp_Sobel_fu_88_p_dst_maty_data_V_ce0),
    .we0(grp_Sobel_fu_88_p_dst_maty_data_V_we0),
    .d0(grp_Sobel_fu_88_p_dst_maty_data_V_d0)
);

Sobel grp_Sobel_fu_88(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Sobel_fu_88_ap_start),
    .ap_done(grp_Sobel_fu_88_ap_done),
    .ap_idle(grp_Sobel_fu_88_ap_idle),
    .ap_ready(grp_Sobel_fu_88_ap_ready),
    .p_src_mat_rows_read(height_read_reg_148),
    .p_src_mat_cols_read(width_read_reg_141),
    .p_src_mat_data_V_address0(grp_Sobel_fu_88_p_src_mat_data_V_address0),
    .p_src_mat_data_V_ce0(grp_Sobel_fu_88_p_src_mat_data_V_ce0),
    .p_src_mat_data_V_q0(p_ImgInput_data_V_q0),
    .p_dst_matx_data_V_address0(grp_Sobel_fu_88_p_dst_matx_data_V_address0),
    .p_dst_matx_data_V_ce0(grp_Sobel_fu_88_p_dst_matx_data_V_ce0),
    .p_dst_matx_data_V_we0(grp_Sobel_fu_88_p_dst_matx_data_V_we0),
    .p_dst_matx_data_V_d0(grp_Sobel_fu_88_p_dst_matx_data_V_d0),
    .p_dst_maty_data_V_address0(grp_Sobel_fu_88_p_dst_maty_data_V_address0),
    .p_dst_maty_data_V_ce0(grp_Sobel_fu_88_p_dst_maty_data_V_ce0),
    .p_dst_maty_data_V_we0(grp_Sobel_fu_88_p_dst_maty_data_V_we0),
    .p_dst_maty_data_V_d0(grp_Sobel_fu_88_p_dst_maty_data_V_d0)
);

xfMat2AXIvideo grp_xfMat2AXIvideo_fu_97(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_xfMat2AXIvideo_fu_97_ap_start),
    .ap_done(grp_xfMat2AXIvideo_fu_97_ap_done),
    .ap_idle(grp_xfMat2AXIvideo_fu_97_ap_idle),
    .ap_ready(grp_xfMat2AXIvideo_fu_97_ap_ready),
    .img_rows_read(height_read_reg_148),
    .img_cols_read(width_read_reg_141),
    .img_data_V_address0(grp_xfMat2AXIvideo_fu_97_img_data_V_address0),
    .img_data_V_ce0(grp_xfMat2AXIvideo_fu_97_img_data_V_ce0),
    .img_data_V_q0(p_ImgSobelx_data_V_q0),
    .p_dst_TDATA(grp_xfMat2AXIvideo_fu_97_p_dst_TDATA),
    .p_dst_TVALID(grp_xfMat2AXIvideo_fu_97_p_dst_TVALID),
    .p_dst_TREADY(grp_xfMat2AXIvideo_fu_97_p_dst_TREADY),
    .p_dst_TKEEP(grp_xfMat2AXIvideo_fu_97_p_dst_TKEEP),
    .p_dst_TSTRB(grp_xfMat2AXIvideo_fu_97_p_dst_TSTRB),
    .p_dst_TUSER(grp_xfMat2AXIvideo_fu_97_p_dst_TUSER),
    .p_dst_TLAST(grp_xfMat2AXIvideo_fu_97_p_dst_TLAST),
    .p_dst_TID(grp_xfMat2AXIvideo_fu_97_p_dst_TID),
    .p_dst_TDEST(grp_xfMat2AXIvideo_fu_97_p_dst_TDEST)
);

AXIvideo2xfMat grp_AXIvideo2xfMat_fu_118(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_AXIvideo2xfMat_fu_118_ap_start),
    .ap_done(grp_AXIvideo2xfMat_fu_118_ap_done),
    .ap_idle(grp_AXIvideo2xfMat_fu_118_ap_idle),
    .ap_ready(grp_AXIvideo2xfMat_fu_118_ap_ready),
    .p_src_TDATA(p_src_V_data_V_0_data_out),
    .p_src_TVALID(grp_AXIvideo2xfMat_fu_118_p_src_TVALID),
    .p_src_TREADY(grp_AXIvideo2xfMat_fu_118_p_src_TREADY),
    .p_src_TKEEP(p_src_V_keep_V_0_data_out),
    .p_src_TSTRB(p_src_V_strb_V_0_data_out),
    .p_src_TUSER(p_src_V_user_V_0_data_out),
    .p_src_TLAST(p_src_V_last_V_0_data_out),
    .p_src_TID(p_src_V_id_V_0_data_out),
    .p_src_TDEST(p_src_V_dest_V_0_data_out),
    .img_rows_read(height_read_reg_148),
    .img_cols_read(width_read_reg_141),
    .img_data_V_address0(grp_AXIvideo2xfMat_fu_118_img_data_V_address0),
    .img_data_V_ce0(grp_AXIvideo2xfMat_fu_118_img_data_V_ce0),
    .img_data_V_we0(grp_AXIvideo2xfMat_fu_118_img_data_V_we0),
    .img_data_V_d0(grp_AXIvideo2xfMat_fu_118_img_data_V_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_AXIvideo2xfMat_fu_118_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_AXIvideo2xfMat_fu_118_ap_start_reg <= 1'b1;
        end else if ((grp_AXIvideo2xfMat_fu_118_ap_ready == 1'b1)) begin
            grp_AXIvideo2xfMat_fu_118_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Sobel_fu_88_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_Sobel_fu_88_ap_start_reg <= 1'b1;
        end else if ((grp_Sobel_fu_88_ap_ready == 1'b1)) begin
            grp_Sobel_fu_88_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_xfMat2AXIvideo_fu_97_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_xfMat2AXIvideo_fu_97_ap_start_reg <= 1'b1;
        end else if ((grp_xfMat2AXIvideo_fu_97_ap_ready == 1'b1)) begin
            grp_xfMat2AXIvideo_fu_97_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((p_dst_V_data_V_1_ack_out == 1'b1) & (p_dst_V_data_V_1_vld_out == 1'b1))) begin
            p_dst_V_data_V_1_sel_rd <= ~p_dst_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((p_dst_V_data_V_1_ack_in == 1'b1) & (p_dst_V_data_V_1_vld_in == 1'b1))) begin
            p_dst_V_data_V_1_sel_wr <= ~p_dst_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((p_dst_V_data_V_1_state == 2'd2) & (p_dst_V_data_V_1_vld_in == 1'b0)) | ((p_dst_V_data_V_1_state == 2'd3) & (p_dst_V_data_V_1_vld_in == 1'b0) & (p_dst_V_data_V_1_ack_out == 1'b1)))) begin
            p_dst_V_data_V_1_state <= 2'd2;
        end else if ((((p_dst_V_data_V_1_state == 2'd1) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_data_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0) & (p_dst_V_data_V_1_vld_in == 1'b1)))) begin
            p_dst_V_data_V_1_state <= 2'd1;
        end else if (((~((p_dst_V_data_V_1_vld_in == 1'b0) & (p_dst_V_data_V_1_ack_out == 1'b1)) & ~((p_dst_TREADY == 1'b0) & (p_dst_V_data_V_1_vld_in == 1'b1)) & (p_dst_V_data_V_1_state == 2'd3)) | ((p_dst_V_data_V_1_state == 2'd1) & (p_dst_V_data_V_1_ack_out == 1'b1)) | ((p_dst_V_data_V_1_state == 2'd2) & (p_dst_V_data_V_1_vld_in == 1'b1)))) begin
            p_dst_V_data_V_1_state <= 2'd3;
        end else begin
            p_dst_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((p_dst_V_dest_V_1_ack_out == 1'b1) & (p_dst_V_dest_V_1_vld_out == 1'b1))) begin
            p_dst_V_dest_V_1_sel_rd <= ~p_dst_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((p_dst_V_dest_V_1_ack_in == 1'b1) & (p_dst_V_dest_V_1_vld_in == 1'b1))) begin
            p_dst_V_dest_V_1_sel_wr <= ~p_dst_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((p_dst_V_dest_V_1_state == 2'd2) & (p_dst_V_dest_V_1_vld_in == 1'b0)) | ((p_dst_V_dest_V_1_state == 2'd3) & (p_dst_V_dest_V_1_vld_in == 1'b0) & (p_dst_V_dest_V_1_ack_out == 1'b1)))) begin
            p_dst_V_dest_V_1_state <= 2'd2;
        end else if ((((p_dst_V_dest_V_1_state == 2'd1) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_dest_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0) & (p_dst_V_dest_V_1_vld_in == 1'b1)))) begin
            p_dst_V_dest_V_1_state <= 2'd1;
        end else if (((~((p_dst_V_dest_V_1_vld_in == 1'b0) & (p_dst_V_dest_V_1_ack_out == 1'b1)) & ~((p_dst_TREADY == 1'b0) & (p_dst_V_dest_V_1_vld_in == 1'b1)) & (p_dst_V_dest_V_1_state == 2'd3)) | ((p_dst_V_dest_V_1_state == 2'd1) & (p_dst_V_dest_V_1_ack_out == 1'b1)) | ((p_dst_V_dest_V_1_state == 2'd2) & (p_dst_V_dest_V_1_vld_in == 1'b1)))) begin
            p_dst_V_dest_V_1_state <= 2'd3;
        end else begin
            p_dst_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((p_dst_V_id_V_1_ack_out == 1'b1) & (p_dst_V_id_V_1_vld_out == 1'b1))) begin
            p_dst_V_id_V_1_sel_rd <= ~p_dst_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((p_dst_V_id_V_1_ack_in == 1'b1) & (p_dst_V_id_V_1_vld_in == 1'b1))) begin
            p_dst_V_id_V_1_sel_wr <= ~p_dst_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((p_dst_V_id_V_1_state == 2'd2) & (p_dst_V_id_V_1_vld_in == 1'b0)) | ((p_dst_V_id_V_1_state == 2'd3) & (p_dst_V_id_V_1_vld_in == 1'b0) & (p_dst_V_id_V_1_ack_out == 1'b1)))) begin
            p_dst_V_id_V_1_state <= 2'd2;
        end else if ((((p_dst_V_id_V_1_state == 2'd1) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_id_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0) & (p_dst_V_id_V_1_vld_in == 1'b1)))) begin
            p_dst_V_id_V_1_state <= 2'd1;
        end else if (((~((p_dst_V_id_V_1_vld_in == 1'b0) & (p_dst_V_id_V_1_ack_out == 1'b1)) & ~((p_dst_TREADY == 1'b0) & (p_dst_V_id_V_1_vld_in == 1'b1)) & (p_dst_V_id_V_1_state == 2'd3)) | ((p_dst_V_id_V_1_state == 2'd1) & (p_dst_V_id_V_1_ack_out == 1'b1)) | ((p_dst_V_id_V_1_state == 2'd2) & (p_dst_V_id_V_1_vld_in == 1'b1)))) begin
            p_dst_V_id_V_1_state <= 2'd3;
        end else begin
            p_dst_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((p_dst_V_keep_V_1_ack_out == 1'b1) & (p_dst_V_keep_V_1_vld_out == 1'b1))) begin
            p_dst_V_keep_V_1_sel_rd <= ~p_dst_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((p_dst_V_keep_V_1_ack_in == 1'b1) & (p_dst_V_keep_V_1_vld_in == 1'b1))) begin
            p_dst_V_keep_V_1_sel_wr <= ~p_dst_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((p_dst_V_keep_V_1_state == 2'd2) & (p_dst_V_keep_V_1_vld_in == 1'b0)) | ((p_dst_V_keep_V_1_state == 2'd3) & (p_dst_V_keep_V_1_vld_in == 1'b0) & (p_dst_V_keep_V_1_ack_out == 1'b1)))) begin
            p_dst_V_keep_V_1_state <= 2'd2;
        end else if ((((p_dst_V_keep_V_1_state == 2'd1) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_keep_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0) & (p_dst_V_keep_V_1_vld_in == 1'b1)))) begin
            p_dst_V_keep_V_1_state <= 2'd1;
        end else if (((~((p_dst_V_keep_V_1_vld_in == 1'b0) & (p_dst_V_keep_V_1_ack_out == 1'b1)) & ~((p_dst_TREADY == 1'b0) & (p_dst_V_keep_V_1_vld_in == 1'b1)) & (p_dst_V_keep_V_1_state == 2'd3)) | ((p_dst_V_keep_V_1_state == 2'd1) & (p_dst_V_keep_V_1_ack_out == 1'b1)) | ((p_dst_V_keep_V_1_state == 2'd2) & (p_dst_V_keep_V_1_vld_in == 1'b1)))) begin
            p_dst_V_keep_V_1_state <= 2'd3;
        end else begin
            p_dst_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((p_dst_V_last_V_1_ack_out == 1'b1) & (p_dst_V_last_V_1_vld_out == 1'b1))) begin
            p_dst_V_last_V_1_sel_rd <= ~p_dst_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((p_dst_V_last_V_1_ack_in == 1'b1) & (p_dst_V_last_V_1_vld_in == 1'b1))) begin
            p_dst_V_last_V_1_sel_wr <= ~p_dst_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((p_dst_V_last_V_1_state == 2'd2) & (p_dst_V_last_V_1_vld_in == 1'b0)) | ((p_dst_V_last_V_1_state == 2'd3) & (p_dst_V_last_V_1_vld_in == 1'b0) & (p_dst_V_last_V_1_ack_out == 1'b1)))) begin
            p_dst_V_last_V_1_state <= 2'd2;
        end else if ((((p_dst_V_last_V_1_state == 2'd1) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_last_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0) & (p_dst_V_last_V_1_vld_in == 1'b1)))) begin
            p_dst_V_last_V_1_state <= 2'd1;
        end else if (((~((p_dst_V_last_V_1_vld_in == 1'b0) & (p_dst_V_last_V_1_ack_out == 1'b1)) & ~((p_dst_TREADY == 1'b0) & (p_dst_V_last_V_1_vld_in == 1'b1)) & (p_dst_V_last_V_1_state == 2'd3)) | ((p_dst_V_last_V_1_state == 2'd1) & (p_dst_V_last_V_1_ack_out == 1'b1)) | ((p_dst_V_last_V_1_state == 2'd2) & (p_dst_V_last_V_1_vld_in == 1'b1)))) begin
            p_dst_V_last_V_1_state <= 2'd3;
        end else begin
            p_dst_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((p_dst_V_strb_V_1_ack_out == 1'b1) & (p_dst_V_strb_V_1_vld_out == 1'b1))) begin
            p_dst_V_strb_V_1_sel_rd <= ~p_dst_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((p_dst_V_strb_V_1_ack_in == 1'b1) & (p_dst_V_strb_V_1_vld_in == 1'b1))) begin
            p_dst_V_strb_V_1_sel_wr <= ~p_dst_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((p_dst_V_strb_V_1_state == 2'd2) & (p_dst_V_strb_V_1_vld_in == 1'b0)) | ((p_dst_V_strb_V_1_state == 2'd3) & (p_dst_V_strb_V_1_vld_in == 1'b0) & (p_dst_V_strb_V_1_ack_out == 1'b1)))) begin
            p_dst_V_strb_V_1_state <= 2'd2;
        end else if ((((p_dst_V_strb_V_1_state == 2'd1) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_strb_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0) & (p_dst_V_strb_V_1_vld_in == 1'b1)))) begin
            p_dst_V_strb_V_1_state <= 2'd1;
        end else if (((~((p_dst_V_strb_V_1_vld_in == 1'b0) & (p_dst_V_strb_V_1_ack_out == 1'b1)) & ~((p_dst_TREADY == 1'b0) & (p_dst_V_strb_V_1_vld_in == 1'b1)) & (p_dst_V_strb_V_1_state == 2'd3)) | ((p_dst_V_strb_V_1_state == 2'd1) & (p_dst_V_strb_V_1_ack_out == 1'b1)) | ((p_dst_V_strb_V_1_state == 2'd2) & (p_dst_V_strb_V_1_vld_in == 1'b1)))) begin
            p_dst_V_strb_V_1_state <= 2'd3;
        end else begin
            p_dst_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((p_dst_V_user_V_1_ack_out == 1'b1) & (p_dst_V_user_V_1_vld_out == 1'b1))) begin
            p_dst_V_user_V_1_sel_rd <= ~p_dst_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((p_dst_V_user_V_1_ack_in == 1'b1) & (p_dst_V_user_V_1_vld_in == 1'b1))) begin
            p_dst_V_user_V_1_sel_wr <= ~p_dst_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_dst_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((p_dst_V_user_V_1_state == 2'd2) & (p_dst_V_user_V_1_vld_in == 1'b0)) | ((p_dst_V_user_V_1_state == 2'd3) & (p_dst_V_user_V_1_vld_in == 1'b0) & (p_dst_V_user_V_1_ack_out == 1'b1)))) begin
            p_dst_V_user_V_1_state <= 2'd2;
        end else if ((((p_dst_V_user_V_1_state == 2'd1) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_user_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0) & (p_dst_V_user_V_1_vld_in == 1'b1)))) begin
            p_dst_V_user_V_1_state <= 2'd1;
        end else if (((~((p_dst_V_user_V_1_vld_in == 1'b0) & (p_dst_V_user_V_1_ack_out == 1'b1)) & ~((p_dst_TREADY == 1'b0) & (p_dst_V_user_V_1_vld_in == 1'b1)) & (p_dst_V_user_V_1_state == 2'd3)) | ((p_dst_V_user_V_1_state == 2'd1) & (p_dst_V_user_V_1_ack_out == 1'b1)) | ((p_dst_V_user_V_1_state == 2'd2) & (p_dst_V_user_V_1_vld_in == 1'b1)))) begin
            p_dst_V_user_V_1_state <= 2'd3;
        end else begin
            p_dst_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((p_src_V_data_V_0_ack_out == 1'b1) & (p_src_V_data_V_0_vld_out == 1'b1))) begin
            p_src_V_data_V_0_sel_rd <= ~p_src_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((p_src_V_data_V_0_ack_in == 1'b1) & (p_src_V_data_V_0_vld_in == 1'b1))) begin
            p_src_V_data_V_0_sel_wr <= ~p_src_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((p_src_V_data_V_0_state == 2'd2) & (p_src_V_data_V_0_vld_in == 1'b0)) | ((p_src_V_data_V_0_state == 2'd3) & (p_src_V_data_V_0_vld_in == 1'b0) & (p_src_V_data_V_0_ack_out == 1'b1)))) begin
            p_src_V_data_V_0_state <= 2'd2;
        end else if ((((p_src_V_data_V_0_state == 2'd1) & (p_src_V_data_V_0_ack_out == 1'b0)) | ((p_src_V_data_V_0_state == 2'd3) & (p_src_V_data_V_0_ack_out == 1'b0) & (p_src_V_data_V_0_vld_in == 1'b1)))) begin
            p_src_V_data_V_0_state <= 2'd1;
        end else if (((~((p_src_V_data_V_0_vld_in == 1'b0) & (p_src_V_data_V_0_ack_out == 1'b1)) & ~((p_src_V_data_V_0_ack_out == 1'b0) & (p_src_V_data_V_0_vld_in == 1'b1)) & (p_src_V_data_V_0_state == 2'd3)) | ((p_src_V_data_V_0_state == 2'd1) & (p_src_V_data_V_0_ack_out == 1'b1)) | ((p_src_V_data_V_0_state == 2'd2) & (p_src_V_data_V_0_vld_in == 1'b1)))) begin
            p_src_V_data_V_0_state <= 2'd3;
        end else begin
            p_src_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((p_src_V_dest_V_0_ack_out == 1'b1) & (p_src_V_dest_V_0_vld_out == 1'b1))) begin
            p_src_V_dest_V_0_sel_rd <= ~p_src_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((p_src_V_dest_V_0_ack_in == 1'b1) & (p_src_V_dest_V_0_vld_in == 1'b1))) begin
            p_src_V_dest_V_0_sel_wr <= ~p_src_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((p_src_V_dest_V_0_state == 2'd2) & (p_src_V_dest_V_0_vld_in == 1'b0)) | ((p_src_V_dest_V_0_state == 2'd3) & (p_src_V_dest_V_0_vld_in == 1'b0) & (p_src_V_dest_V_0_ack_out == 1'b1)))) begin
            p_src_V_dest_V_0_state <= 2'd2;
        end else if ((((p_src_V_dest_V_0_state == 2'd1) & (p_src_V_dest_V_0_ack_out == 1'b0)) | ((p_src_V_dest_V_0_state == 2'd3) & (p_src_V_dest_V_0_ack_out == 1'b0) & (p_src_V_dest_V_0_vld_in == 1'b1)))) begin
            p_src_V_dest_V_0_state <= 2'd1;
        end else if (((~((p_src_V_dest_V_0_vld_in == 1'b0) & (p_src_V_dest_V_0_ack_out == 1'b1)) & ~((p_src_V_dest_V_0_ack_out == 1'b0) & (p_src_V_dest_V_0_vld_in == 1'b1)) & (p_src_V_dest_V_0_state == 2'd3)) | ((p_src_V_dest_V_0_state == 2'd1) & (p_src_V_dest_V_0_ack_out == 1'b1)) | ((p_src_V_dest_V_0_state == 2'd2) & (p_src_V_dest_V_0_vld_in == 1'b1)))) begin
            p_src_V_dest_V_0_state <= 2'd3;
        end else begin
            p_src_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((p_src_V_id_V_0_ack_out == 1'b1) & (p_src_V_id_V_0_vld_out == 1'b1))) begin
            p_src_V_id_V_0_sel_rd <= ~p_src_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((p_src_V_id_V_0_ack_in == 1'b1) & (p_src_V_id_V_0_vld_in == 1'b1))) begin
            p_src_V_id_V_0_sel_wr <= ~p_src_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((p_src_V_id_V_0_state == 2'd2) & (p_src_V_id_V_0_vld_in == 1'b0)) | ((p_src_V_id_V_0_state == 2'd3) & (p_src_V_id_V_0_vld_in == 1'b0) & (p_src_V_id_V_0_ack_out == 1'b1)))) begin
            p_src_V_id_V_0_state <= 2'd2;
        end else if ((((p_src_V_id_V_0_state == 2'd1) & (p_src_V_id_V_0_ack_out == 1'b0)) | ((p_src_V_id_V_0_state == 2'd3) & (p_src_V_id_V_0_ack_out == 1'b0) & (p_src_V_id_V_0_vld_in == 1'b1)))) begin
            p_src_V_id_V_0_state <= 2'd1;
        end else if (((~((p_src_V_id_V_0_vld_in == 1'b0) & (p_src_V_id_V_0_ack_out == 1'b1)) & ~((p_src_V_id_V_0_ack_out == 1'b0) & (p_src_V_id_V_0_vld_in == 1'b1)) & (p_src_V_id_V_0_state == 2'd3)) | ((p_src_V_id_V_0_state == 2'd1) & (p_src_V_id_V_0_ack_out == 1'b1)) | ((p_src_V_id_V_0_state == 2'd2) & (p_src_V_id_V_0_vld_in == 1'b1)))) begin
            p_src_V_id_V_0_state <= 2'd3;
        end else begin
            p_src_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((p_src_V_keep_V_0_ack_out == 1'b1) & (p_src_V_keep_V_0_vld_out == 1'b1))) begin
            p_src_V_keep_V_0_sel_rd <= ~p_src_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((p_src_V_keep_V_0_ack_in == 1'b1) & (p_src_V_keep_V_0_vld_in == 1'b1))) begin
            p_src_V_keep_V_0_sel_wr <= ~p_src_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((p_src_V_keep_V_0_state == 2'd2) & (p_src_V_keep_V_0_vld_in == 1'b0)) | ((p_src_V_keep_V_0_state == 2'd3) & (p_src_V_keep_V_0_vld_in == 1'b0) & (p_src_V_keep_V_0_ack_out == 1'b1)))) begin
            p_src_V_keep_V_0_state <= 2'd2;
        end else if ((((p_src_V_keep_V_0_state == 2'd1) & (p_src_V_keep_V_0_ack_out == 1'b0)) | ((p_src_V_keep_V_0_state == 2'd3) & (p_src_V_keep_V_0_ack_out == 1'b0) & (p_src_V_keep_V_0_vld_in == 1'b1)))) begin
            p_src_V_keep_V_0_state <= 2'd1;
        end else if (((~((p_src_V_keep_V_0_vld_in == 1'b0) & (p_src_V_keep_V_0_ack_out == 1'b1)) & ~((p_src_V_keep_V_0_ack_out == 1'b0) & (p_src_V_keep_V_0_vld_in == 1'b1)) & (p_src_V_keep_V_0_state == 2'd3)) | ((p_src_V_keep_V_0_state == 2'd1) & (p_src_V_keep_V_0_ack_out == 1'b1)) | ((p_src_V_keep_V_0_state == 2'd2) & (p_src_V_keep_V_0_vld_in == 1'b1)))) begin
            p_src_V_keep_V_0_state <= 2'd3;
        end else begin
            p_src_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((p_src_V_last_V_0_ack_out == 1'b1) & (p_src_V_last_V_0_vld_out == 1'b1))) begin
            p_src_V_last_V_0_sel_rd <= ~p_src_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((p_src_V_last_V_0_ack_in == 1'b1) & (p_src_V_last_V_0_vld_in == 1'b1))) begin
            p_src_V_last_V_0_sel_wr <= ~p_src_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((p_src_V_last_V_0_state == 2'd2) & (p_src_V_last_V_0_vld_in == 1'b0)) | ((p_src_V_last_V_0_state == 2'd3) & (p_src_V_last_V_0_vld_in == 1'b0) & (p_src_V_last_V_0_ack_out == 1'b1)))) begin
            p_src_V_last_V_0_state <= 2'd2;
        end else if ((((p_src_V_last_V_0_state == 2'd1) & (p_src_V_last_V_0_ack_out == 1'b0)) | ((p_src_V_last_V_0_state == 2'd3) & (p_src_V_last_V_0_ack_out == 1'b0) & (p_src_V_last_V_0_vld_in == 1'b1)))) begin
            p_src_V_last_V_0_state <= 2'd1;
        end else if (((~((p_src_V_last_V_0_vld_in == 1'b0) & (p_src_V_last_V_0_ack_out == 1'b1)) & ~((p_src_V_last_V_0_ack_out == 1'b0) & (p_src_V_last_V_0_vld_in == 1'b1)) & (p_src_V_last_V_0_state == 2'd3)) | ((p_src_V_last_V_0_state == 2'd1) & (p_src_V_last_V_0_ack_out == 1'b1)) | ((p_src_V_last_V_0_state == 2'd2) & (p_src_V_last_V_0_vld_in == 1'b1)))) begin
            p_src_V_last_V_0_state <= 2'd3;
        end else begin
            p_src_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((p_src_V_strb_V_0_ack_out == 1'b1) & (p_src_V_strb_V_0_vld_out == 1'b1))) begin
            p_src_V_strb_V_0_sel_rd <= ~p_src_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((p_src_V_strb_V_0_ack_in == 1'b1) & (p_src_V_strb_V_0_vld_in == 1'b1))) begin
            p_src_V_strb_V_0_sel_wr <= ~p_src_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((p_src_V_strb_V_0_state == 2'd2) & (p_src_V_strb_V_0_vld_in == 1'b0)) | ((p_src_V_strb_V_0_state == 2'd3) & (p_src_V_strb_V_0_vld_in == 1'b0) & (p_src_V_strb_V_0_ack_out == 1'b1)))) begin
            p_src_V_strb_V_0_state <= 2'd2;
        end else if ((((p_src_V_strb_V_0_state == 2'd1) & (p_src_V_strb_V_0_ack_out == 1'b0)) | ((p_src_V_strb_V_0_state == 2'd3) & (p_src_V_strb_V_0_ack_out == 1'b0) & (p_src_V_strb_V_0_vld_in == 1'b1)))) begin
            p_src_V_strb_V_0_state <= 2'd1;
        end else if (((~((p_src_V_strb_V_0_vld_in == 1'b0) & (p_src_V_strb_V_0_ack_out == 1'b1)) & ~((p_src_V_strb_V_0_ack_out == 1'b0) & (p_src_V_strb_V_0_vld_in == 1'b1)) & (p_src_V_strb_V_0_state == 2'd3)) | ((p_src_V_strb_V_0_state == 2'd1) & (p_src_V_strb_V_0_ack_out == 1'b1)) | ((p_src_V_strb_V_0_state == 2'd2) & (p_src_V_strb_V_0_vld_in == 1'b1)))) begin
            p_src_V_strb_V_0_state <= 2'd3;
        end else begin
            p_src_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((p_src_V_user_V_0_ack_out == 1'b1) & (p_src_V_user_V_0_vld_out == 1'b1))) begin
            p_src_V_user_V_0_sel_rd <= ~p_src_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((p_src_V_user_V_0_ack_in == 1'b1) & (p_src_V_user_V_0_vld_in == 1'b1))) begin
            p_src_V_user_V_0_sel_wr <= ~p_src_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        p_src_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((p_src_V_user_V_0_state == 2'd2) & (p_src_V_user_V_0_vld_in == 1'b0)) | ((p_src_V_user_V_0_state == 2'd3) & (p_src_V_user_V_0_vld_in == 1'b0) & (p_src_V_user_V_0_ack_out == 1'b1)))) begin
            p_src_V_user_V_0_state <= 2'd2;
        end else if ((((p_src_V_user_V_0_state == 2'd1) & (p_src_V_user_V_0_ack_out == 1'b0)) | ((p_src_V_user_V_0_state == 2'd3) & (p_src_V_user_V_0_ack_out == 1'b0) & (p_src_V_user_V_0_vld_in == 1'b1)))) begin
            p_src_V_user_V_0_state <= 2'd1;
        end else if (((~((p_src_V_user_V_0_vld_in == 1'b0) & (p_src_V_user_V_0_ack_out == 1'b1)) & ~((p_src_V_user_V_0_ack_out == 1'b0) & (p_src_V_user_V_0_vld_in == 1'b1)) & (p_src_V_user_V_0_state == 2'd3)) | ((p_src_V_user_V_0_state == 2'd1) & (p_src_V_user_V_0_ack_out == 1'b1)) | ((p_src_V_user_V_0_state == 2'd2) & (p_src_V_user_V_0_vld_in == 1'b1)))) begin
            p_src_V_user_V_0_state <= 2'd3;
        end else begin
            p_src_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        height_read_reg_148 <= height;
        width_read_reg_141 <= width;
    end
end

always @ (posedge ap_clk) begin
    if ((p_dst_V_data_V_1_load_A == 1'b1)) begin
        p_dst_V_data_V_1_payload_A <= grp_xfMat2AXIvideo_fu_97_p_dst_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((p_dst_V_data_V_1_load_B == 1'b1)) begin
        p_dst_V_data_V_1_payload_B <= grp_xfMat2AXIvideo_fu_97_p_dst_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((p_dst_V_dest_V_1_load_A == 1'b1)) begin
        p_dst_V_dest_V_1_payload_A <= grp_xfMat2AXIvideo_fu_97_p_dst_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((p_dst_V_dest_V_1_load_B == 1'b1)) begin
        p_dst_V_dest_V_1_payload_B <= grp_xfMat2AXIvideo_fu_97_p_dst_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((p_dst_V_id_V_1_load_A == 1'b1)) begin
        p_dst_V_id_V_1_payload_A <= grp_xfMat2AXIvideo_fu_97_p_dst_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((p_dst_V_id_V_1_load_B == 1'b1)) begin
        p_dst_V_id_V_1_payload_B <= grp_xfMat2AXIvideo_fu_97_p_dst_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((p_dst_V_keep_V_1_load_A == 1'b1)) begin
        p_dst_V_keep_V_1_payload_A <= grp_xfMat2AXIvideo_fu_97_p_dst_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((p_dst_V_keep_V_1_load_B == 1'b1)) begin
        p_dst_V_keep_V_1_payload_B <= grp_xfMat2AXIvideo_fu_97_p_dst_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((p_dst_V_last_V_1_load_A == 1'b1)) begin
        p_dst_V_last_V_1_payload_A <= grp_xfMat2AXIvideo_fu_97_p_dst_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((p_dst_V_last_V_1_load_B == 1'b1)) begin
        p_dst_V_last_V_1_payload_B <= grp_xfMat2AXIvideo_fu_97_p_dst_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((p_dst_V_strb_V_1_load_A == 1'b1)) begin
        p_dst_V_strb_V_1_payload_A <= grp_xfMat2AXIvideo_fu_97_p_dst_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((p_dst_V_strb_V_1_load_B == 1'b1)) begin
        p_dst_V_strb_V_1_payload_B <= grp_xfMat2AXIvideo_fu_97_p_dst_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((p_dst_V_user_V_1_load_A == 1'b1)) begin
        p_dst_V_user_V_1_payload_A <= grp_xfMat2AXIvideo_fu_97_p_dst_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((p_dst_V_user_V_1_load_B == 1'b1)) begin
        p_dst_V_user_V_1_payload_B <= grp_xfMat2AXIvideo_fu_97_p_dst_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((p_src_V_data_V_0_load_A == 1'b1)) begin
        p_src_V_data_V_0_payload_A <= p_src_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((p_src_V_data_V_0_load_B == 1'b1)) begin
        p_src_V_data_V_0_payload_B <= p_src_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((p_src_V_dest_V_0_load_A == 1'b1)) begin
        p_src_V_dest_V_0_payload_A <= p_src_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((p_src_V_dest_V_0_load_B == 1'b1)) begin
        p_src_V_dest_V_0_payload_B <= p_src_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((p_src_V_id_V_0_load_A == 1'b1)) begin
        p_src_V_id_V_0_payload_A <= p_src_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((p_src_V_id_V_0_load_B == 1'b1)) begin
        p_src_V_id_V_0_payload_B <= p_src_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((p_src_V_keep_V_0_load_A == 1'b1)) begin
        p_src_V_keep_V_0_payload_A <= p_src_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((p_src_V_keep_V_0_load_B == 1'b1)) begin
        p_src_V_keep_V_0_payload_B <= p_src_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((p_src_V_last_V_0_load_A == 1'b1)) begin
        p_src_V_last_V_0_payload_A <= p_src_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((p_src_V_last_V_0_load_B == 1'b1)) begin
        p_src_V_last_V_0_payload_B <= p_src_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((p_src_V_strb_V_0_load_A == 1'b1)) begin
        p_src_V_strb_V_0_payload_A <= p_src_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((p_src_V_strb_V_0_load_B == 1'b1)) begin
        p_src_V_strb_V_0_payload_B <= p_src_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((p_src_V_user_V_0_load_A == 1'b1)) begin
        p_src_V_user_V_0_payload_A <= p_src_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((p_src_V_user_V_0_load_B == 1'b1)) begin
        p_src_V_user_V_0_payload_B <= p_src_TUSER;
    end
end

always @ (*) begin
    if ((~((p_dst_V_dest_V_1_state == 2'd1) | (p_dst_V_id_V_1_state == 2'd1) | (p_dst_V_last_V_1_state == 2'd1) | (p_dst_V_user_V_1_state == 2'd1) | (p_dst_V_strb_V_1_state == 2'd1) | (p_dst_V_keep_V_1_state == 2'd1) | (p_dst_V_data_V_1_state == 2'd1) | ((p_dst_V_dest_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_id_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_last_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_user_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_strb_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_keep_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_data_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_dst_V_dest_V_1_state == 2'd1) | (p_dst_V_id_V_1_state == 2'd1) | (p_dst_V_last_V_1_state == 2'd1) | (p_dst_V_user_V_1_state == 2'd1) | (p_dst_V_strb_V_1_state == 2'd1) | (p_dst_V_keep_V_1_state == 2'd1) | (p_dst_V_data_V_1_state == 2'd1) | ((p_dst_V_dest_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_id_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_last_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_user_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_strb_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_keep_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_data_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_ImgInput_data_V_address0 = grp_AXIvideo2xfMat_fu_118_img_data_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_ImgInput_data_V_address0 = grp_Sobel_fu_88_p_src_mat_data_V_address0;
    end else begin
        p_ImgInput_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_ImgInput_data_V_ce0 = grp_AXIvideo2xfMat_fu_118_img_data_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_ImgInput_data_V_ce0 = grp_Sobel_fu_88_p_src_mat_data_V_ce0;
    end else begin
        p_ImgInput_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_ImgInput_data_V_we0 = grp_AXIvideo2xfMat_fu_118_img_data_V_we0;
    end else begin
        p_ImgInput_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_ImgSobelx_data_V_address0 = grp_xfMat2AXIvideo_fu_97_img_data_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_ImgSobelx_data_V_address0 = grp_Sobel_fu_88_p_dst_matx_data_V_address0;
    end else begin
        p_ImgSobelx_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_ImgSobelx_data_V_ce0 = grp_xfMat2AXIvideo_fu_97_img_data_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_ImgSobelx_data_V_ce0 = grp_Sobel_fu_88_p_dst_matx_data_V_ce0;
    end else begin
        p_ImgSobelx_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_ImgSobelx_data_V_we0 = grp_Sobel_fu_88_p_dst_matx_data_V_we0;
    end else begin
        p_ImgSobelx_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((p_dst_V_data_V_1_sel == 1'b1)) begin
        p_dst_V_data_V_1_data_out = p_dst_V_data_V_1_payload_B;
    end else begin
        p_dst_V_data_V_1_data_out = p_dst_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((p_dst_V_dest_V_1_sel == 1'b1)) begin
        p_dst_V_dest_V_1_data_out = p_dst_V_dest_V_1_payload_B;
    end else begin
        p_dst_V_dest_V_1_data_out = p_dst_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((p_dst_V_id_V_1_sel == 1'b1)) begin
        p_dst_V_id_V_1_data_out = p_dst_V_id_V_1_payload_B;
    end else begin
        p_dst_V_id_V_1_data_out = p_dst_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((p_dst_V_keep_V_1_sel == 1'b1)) begin
        p_dst_V_keep_V_1_data_out = p_dst_V_keep_V_1_payload_B;
    end else begin
        p_dst_V_keep_V_1_data_out = p_dst_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((p_dst_V_last_V_1_sel == 1'b1)) begin
        p_dst_V_last_V_1_data_out = p_dst_V_last_V_1_payload_B;
    end else begin
        p_dst_V_last_V_1_data_out = p_dst_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((p_dst_V_strb_V_1_sel == 1'b1)) begin
        p_dst_V_strb_V_1_data_out = p_dst_V_strb_V_1_payload_B;
    end else begin
        p_dst_V_strb_V_1_data_out = p_dst_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((p_dst_V_user_V_1_sel == 1'b1)) begin
        p_dst_V_user_V_1_data_out = p_dst_V_user_V_1_payload_B;
    end else begin
        p_dst_V_user_V_1_data_out = p_dst_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_src_V_data_V_0_ack_out = grp_AXIvideo2xfMat_fu_118_p_src_TREADY;
    end else begin
        p_src_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((p_src_V_data_V_0_sel == 1'b1)) begin
        p_src_V_data_V_0_data_out = p_src_V_data_V_0_payload_B;
    end else begin
        p_src_V_data_V_0_data_out = p_src_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_src_V_dest_V_0_ack_out = grp_AXIvideo2xfMat_fu_118_p_src_TREADY;
    end else begin
        p_src_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((p_src_V_dest_V_0_sel == 1'b1)) begin
        p_src_V_dest_V_0_data_out = p_src_V_dest_V_0_payload_B;
    end else begin
        p_src_V_dest_V_0_data_out = p_src_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_src_V_id_V_0_ack_out = grp_AXIvideo2xfMat_fu_118_p_src_TREADY;
    end else begin
        p_src_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((p_src_V_id_V_0_sel == 1'b1)) begin
        p_src_V_id_V_0_data_out = p_src_V_id_V_0_payload_B;
    end else begin
        p_src_V_id_V_0_data_out = p_src_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_src_V_keep_V_0_ack_out = grp_AXIvideo2xfMat_fu_118_p_src_TREADY;
    end else begin
        p_src_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((p_src_V_keep_V_0_sel == 1'b1)) begin
        p_src_V_keep_V_0_data_out = p_src_V_keep_V_0_payload_B;
    end else begin
        p_src_V_keep_V_0_data_out = p_src_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_src_V_last_V_0_ack_out = grp_AXIvideo2xfMat_fu_118_p_src_TREADY;
    end else begin
        p_src_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((p_src_V_last_V_0_sel == 1'b1)) begin
        p_src_V_last_V_0_data_out = p_src_V_last_V_0_payload_B;
    end else begin
        p_src_V_last_V_0_data_out = p_src_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_src_V_strb_V_0_ack_out = grp_AXIvideo2xfMat_fu_118_p_src_TREADY;
    end else begin
        p_src_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((p_src_V_strb_V_0_sel == 1'b1)) begin
        p_src_V_strb_V_0_data_out = p_src_V_strb_V_0_payload_B;
    end else begin
        p_src_V_strb_V_0_data_out = p_src_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_src_V_user_V_0_ack_out = grp_AXIvideo2xfMat_fu_118_p_src_TREADY;
    end else begin
        p_src_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((p_src_V_user_V_0_sel == 1'b1)) begin
        p_src_V_user_V_0_data_out = p_src_V_user_V_0_payload_B;
    end else begin
        p_src_V_user_V_0_data_out = p_src_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_AXIvideo2xfMat_fu_118_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_Sobel_fu_88_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_xfMat2AXIvideo_fu_97_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((p_dst_V_dest_V_1_state == 2'd1) | (p_dst_V_id_V_1_state == 2'd1) | (p_dst_V_last_V_1_state == 2'd1) | (p_dst_V_user_V_1_state == 2'd1) | (p_dst_V_strb_V_1_state == 2'd1) | (p_dst_V_keep_V_1_state == 2'd1) | (p_dst_V_data_V_1_state == 2'd1) | ((p_dst_V_dest_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_id_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_last_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_user_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_strb_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_keep_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_data_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state8 = ((p_dst_V_dest_V_1_state == 2'd1) | (p_dst_V_id_V_1_state == 2'd1) | (p_dst_V_last_V_1_state == 2'd1) | (p_dst_V_user_V_1_state == 2'd1) | (p_dst_V_strb_V_1_state == 2'd1) | (p_dst_V_keep_V_1_state == 2'd1) | (p_dst_V_data_V_1_state == 2'd1) | ((p_dst_V_dest_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_id_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_last_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_user_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_strb_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_keep_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)) | ((p_dst_V_data_V_1_state == 2'd3) & (p_dst_TREADY == 1'b0)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_AXIvideo2xfMat_fu_118_ap_start = grp_AXIvideo2xfMat_fu_118_ap_start_reg;

assign grp_AXIvideo2xfMat_fu_118_p_src_TVALID = p_src_V_dest_V_0_state[1'd0];

assign grp_Sobel_fu_88_ap_start = grp_Sobel_fu_88_ap_start_reg;

assign grp_xfMat2AXIvideo_fu_97_ap_start = grp_xfMat2AXIvideo_fu_97_ap_start_reg;

assign grp_xfMat2AXIvideo_fu_97_p_dst_TREADY = ((p_dst_V_dest_V_1_ack_in & ap_CS_fsm_state7) | (p_dst_V_id_V_1_ack_in & ap_CS_fsm_state7) | (p_dst_V_last_V_1_ack_in & ap_CS_fsm_state7) | (p_dst_V_user_V_1_ack_in & ap_CS_fsm_state7) | (p_dst_V_strb_V_1_ack_in & ap_CS_fsm_state7) | (p_dst_V_keep_V_1_ack_in & ap_CS_fsm_state7) | (p_dst_V_data_V_1_ack_in & ap_CS_fsm_state7));

assign p_dst_TDATA = p_dst_V_data_V_1_data_out;

assign p_dst_TDEST = p_dst_V_dest_V_1_data_out;

assign p_dst_TID = p_dst_V_id_V_1_data_out;

assign p_dst_TKEEP = p_dst_V_keep_V_1_data_out;

assign p_dst_TLAST = p_dst_V_last_V_1_data_out;

assign p_dst_TSTRB = p_dst_V_strb_V_1_data_out;

assign p_dst_TUSER = p_dst_V_user_V_1_data_out;

assign p_dst_TVALID = p_dst_V_dest_V_1_state[1'd0];

assign p_dst_V_data_V_1_ack_in = p_dst_V_data_V_1_state[1'd1];

assign p_dst_V_data_V_1_ack_out = p_dst_TREADY;

assign p_dst_V_data_V_1_load_A = (p_dst_V_data_V_1_state_cmp_full & ~p_dst_V_data_V_1_sel_wr);

assign p_dst_V_data_V_1_load_B = (p_dst_V_data_V_1_state_cmp_full & p_dst_V_data_V_1_sel_wr);

assign p_dst_V_data_V_1_sel = p_dst_V_data_V_1_sel_rd;

assign p_dst_V_data_V_1_state_cmp_full = ((p_dst_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign p_dst_V_data_V_1_vld_in = grp_xfMat2AXIvideo_fu_97_p_dst_TVALID;

assign p_dst_V_data_V_1_vld_out = p_dst_V_data_V_1_state[1'd0];

assign p_dst_V_dest_V_1_ack_in = p_dst_V_dest_V_1_state[1'd1];

assign p_dst_V_dest_V_1_ack_out = p_dst_TREADY;

assign p_dst_V_dest_V_1_load_A = (p_dst_V_dest_V_1_state_cmp_full & ~p_dst_V_dest_V_1_sel_wr);

assign p_dst_V_dest_V_1_load_B = (p_dst_V_dest_V_1_state_cmp_full & p_dst_V_dest_V_1_sel_wr);

assign p_dst_V_dest_V_1_sel = p_dst_V_dest_V_1_sel_rd;

assign p_dst_V_dest_V_1_state_cmp_full = ((p_dst_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign p_dst_V_dest_V_1_vld_in = grp_xfMat2AXIvideo_fu_97_p_dst_TVALID;

assign p_dst_V_dest_V_1_vld_out = p_dst_V_dest_V_1_state[1'd0];

assign p_dst_V_id_V_1_ack_in = p_dst_V_id_V_1_state[1'd1];

assign p_dst_V_id_V_1_ack_out = p_dst_TREADY;

assign p_dst_V_id_V_1_load_A = (p_dst_V_id_V_1_state_cmp_full & ~p_dst_V_id_V_1_sel_wr);

assign p_dst_V_id_V_1_load_B = (p_dst_V_id_V_1_state_cmp_full & p_dst_V_id_V_1_sel_wr);

assign p_dst_V_id_V_1_sel = p_dst_V_id_V_1_sel_rd;

assign p_dst_V_id_V_1_state_cmp_full = ((p_dst_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign p_dst_V_id_V_1_vld_in = grp_xfMat2AXIvideo_fu_97_p_dst_TVALID;

assign p_dst_V_id_V_1_vld_out = p_dst_V_id_V_1_state[1'd0];

assign p_dst_V_keep_V_1_ack_in = p_dst_V_keep_V_1_state[1'd1];

assign p_dst_V_keep_V_1_ack_out = p_dst_TREADY;

assign p_dst_V_keep_V_1_load_A = (p_dst_V_keep_V_1_state_cmp_full & ~p_dst_V_keep_V_1_sel_wr);

assign p_dst_V_keep_V_1_load_B = (p_dst_V_keep_V_1_state_cmp_full & p_dst_V_keep_V_1_sel_wr);

assign p_dst_V_keep_V_1_sel = p_dst_V_keep_V_1_sel_rd;

assign p_dst_V_keep_V_1_state_cmp_full = ((p_dst_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign p_dst_V_keep_V_1_vld_in = grp_xfMat2AXIvideo_fu_97_p_dst_TVALID;

assign p_dst_V_keep_V_1_vld_out = p_dst_V_keep_V_1_state[1'd0];

assign p_dst_V_last_V_1_ack_in = p_dst_V_last_V_1_state[1'd1];

assign p_dst_V_last_V_1_ack_out = p_dst_TREADY;

assign p_dst_V_last_V_1_load_A = (p_dst_V_last_V_1_state_cmp_full & ~p_dst_V_last_V_1_sel_wr);

assign p_dst_V_last_V_1_load_B = (p_dst_V_last_V_1_state_cmp_full & p_dst_V_last_V_1_sel_wr);

assign p_dst_V_last_V_1_sel = p_dst_V_last_V_1_sel_rd;

assign p_dst_V_last_V_1_state_cmp_full = ((p_dst_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign p_dst_V_last_V_1_vld_in = grp_xfMat2AXIvideo_fu_97_p_dst_TVALID;

assign p_dst_V_last_V_1_vld_out = p_dst_V_last_V_1_state[1'd0];

assign p_dst_V_strb_V_1_ack_in = p_dst_V_strb_V_1_state[1'd1];

assign p_dst_V_strb_V_1_ack_out = p_dst_TREADY;

assign p_dst_V_strb_V_1_load_A = (p_dst_V_strb_V_1_state_cmp_full & ~p_dst_V_strb_V_1_sel_wr);

assign p_dst_V_strb_V_1_load_B = (p_dst_V_strb_V_1_state_cmp_full & p_dst_V_strb_V_1_sel_wr);

assign p_dst_V_strb_V_1_sel = p_dst_V_strb_V_1_sel_rd;

assign p_dst_V_strb_V_1_state_cmp_full = ((p_dst_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign p_dst_V_strb_V_1_vld_in = grp_xfMat2AXIvideo_fu_97_p_dst_TVALID;

assign p_dst_V_strb_V_1_vld_out = p_dst_V_strb_V_1_state[1'd0];

assign p_dst_V_user_V_1_ack_in = p_dst_V_user_V_1_state[1'd1];

assign p_dst_V_user_V_1_ack_out = p_dst_TREADY;

assign p_dst_V_user_V_1_load_A = (p_dst_V_user_V_1_state_cmp_full & ~p_dst_V_user_V_1_sel_wr);

assign p_dst_V_user_V_1_load_B = (p_dst_V_user_V_1_state_cmp_full & p_dst_V_user_V_1_sel_wr);

assign p_dst_V_user_V_1_sel = p_dst_V_user_V_1_sel_rd;

assign p_dst_V_user_V_1_state_cmp_full = ((p_dst_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign p_dst_V_user_V_1_vld_in = grp_xfMat2AXIvideo_fu_97_p_dst_TVALID;

assign p_dst_V_user_V_1_vld_out = p_dst_V_user_V_1_state[1'd0];

assign p_src_TREADY = p_src_V_dest_V_0_state[1'd1];

assign p_src_V_data_V_0_ack_in = p_src_V_data_V_0_state[1'd1];

assign p_src_V_data_V_0_load_A = (p_src_V_data_V_0_state_cmp_full & ~p_src_V_data_V_0_sel_wr);

assign p_src_V_data_V_0_load_B = (p_src_V_data_V_0_state_cmp_full & p_src_V_data_V_0_sel_wr);

assign p_src_V_data_V_0_sel = p_src_V_data_V_0_sel_rd;

assign p_src_V_data_V_0_state_cmp_full = ((p_src_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign p_src_V_data_V_0_vld_in = p_src_TVALID;

assign p_src_V_data_V_0_vld_out = p_src_V_data_V_0_state[1'd0];

assign p_src_V_dest_V_0_ack_in = p_src_V_dest_V_0_state[1'd1];

assign p_src_V_dest_V_0_load_A = (p_src_V_dest_V_0_state_cmp_full & ~p_src_V_dest_V_0_sel_wr);

assign p_src_V_dest_V_0_load_B = (p_src_V_dest_V_0_state_cmp_full & p_src_V_dest_V_0_sel_wr);

assign p_src_V_dest_V_0_sel = p_src_V_dest_V_0_sel_rd;

assign p_src_V_dest_V_0_state_cmp_full = ((p_src_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign p_src_V_dest_V_0_vld_in = p_src_TVALID;

assign p_src_V_dest_V_0_vld_out = p_src_V_dest_V_0_state[1'd0];

assign p_src_V_id_V_0_ack_in = p_src_V_id_V_0_state[1'd1];

assign p_src_V_id_V_0_load_A = (p_src_V_id_V_0_state_cmp_full & ~p_src_V_id_V_0_sel_wr);

assign p_src_V_id_V_0_load_B = (p_src_V_id_V_0_state_cmp_full & p_src_V_id_V_0_sel_wr);

assign p_src_V_id_V_0_sel = p_src_V_id_V_0_sel_rd;

assign p_src_V_id_V_0_state_cmp_full = ((p_src_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign p_src_V_id_V_0_vld_in = p_src_TVALID;

assign p_src_V_id_V_0_vld_out = p_src_V_id_V_0_state[1'd0];

assign p_src_V_keep_V_0_ack_in = p_src_V_keep_V_0_state[1'd1];

assign p_src_V_keep_V_0_load_A = (p_src_V_keep_V_0_state_cmp_full & ~p_src_V_keep_V_0_sel_wr);

assign p_src_V_keep_V_0_load_B = (p_src_V_keep_V_0_state_cmp_full & p_src_V_keep_V_0_sel_wr);

assign p_src_V_keep_V_0_sel = p_src_V_keep_V_0_sel_rd;

assign p_src_V_keep_V_0_state_cmp_full = ((p_src_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign p_src_V_keep_V_0_vld_in = p_src_TVALID;

assign p_src_V_keep_V_0_vld_out = p_src_V_keep_V_0_state[1'd0];

assign p_src_V_last_V_0_ack_in = p_src_V_last_V_0_state[1'd1];

assign p_src_V_last_V_0_load_A = (p_src_V_last_V_0_state_cmp_full & ~p_src_V_last_V_0_sel_wr);

assign p_src_V_last_V_0_load_B = (p_src_V_last_V_0_state_cmp_full & p_src_V_last_V_0_sel_wr);

assign p_src_V_last_V_0_sel = p_src_V_last_V_0_sel_rd;

assign p_src_V_last_V_0_state_cmp_full = ((p_src_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign p_src_V_last_V_0_vld_in = p_src_TVALID;

assign p_src_V_last_V_0_vld_out = p_src_V_last_V_0_state[1'd0];

assign p_src_V_strb_V_0_ack_in = p_src_V_strb_V_0_state[1'd1];

assign p_src_V_strb_V_0_load_A = (p_src_V_strb_V_0_state_cmp_full & ~p_src_V_strb_V_0_sel_wr);

assign p_src_V_strb_V_0_load_B = (p_src_V_strb_V_0_state_cmp_full & p_src_V_strb_V_0_sel_wr);

assign p_src_V_strb_V_0_sel = p_src_V_strb_V_0_sel_rd;

assign p_src_V_strb_V_0_state_cmp_full = ((p_src_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign p_src_V_strb_V_0_vld_in = p_src_TVALID;

assign p_src_V_strb_V_0_vld_out = p_src_V_strb_V_0_state[1'd0];

assign p_src_V_user_V_0_ack_in = p_src_V_user_V_0_state[1'd1];

assign p_src_V_user_V_0_load_A = (p_src_V_user_V_0_state_cmp_full & ~p_src_V_user_V_0_sel_wr);

assign p_src_V_user_V_0_load_B = (p_src_V_user_V_0_state_cmp_full & p_src_V_user_V_0_sel_wr);

assign p_src_V_user_V_0_sel = p_src_V_user_V_0_sel_rd;

assign p_src_V_user_V_0_state_cmp_full = ((p_src_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign p_src_V_user_V_0_vld_in = p_src_TVALID;

assign p_src_V_user_V_0_vld_out = p_src_V_user_V_0_state[1'd0];

endmodule //Sobel_Stream
