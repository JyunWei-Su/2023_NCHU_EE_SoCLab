// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXIvideo2xfMat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_src_TDATA,
        p_src_TVALID,
        p_src_TREADY,
        p_src_TKEEP,
        p_src_TSTRB,
        p_src_TUSER,
        p_src_TLAST,
        p_src_TID,
        p_src_TDEST,
        img_rows_read,
        img_cols_read,
        img_data_V_address0,
        img_data_V_ce0,
        img_data_V_we0,
        img_data_V_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_src_TDATA;
input   p_src_TVALID;
output   p_src_TREADY;
input  [0:0] p_src_TKEEP;
input  [0:0] p_src_TSTRB;
input  [0:0] p_src_TUSER;
input  [0:0] p_src_TLAST;
input  [0:0] p_src_TID;
input  [0:0] p_src_TDEST;
input  [31:0] img_rows_read;
input  [31:0] img_cols_read;
output  [11:0] img_data_V_address0;
output   img_data_V_ce0;
output   img_data_V_we0;
output  [7:0] img_data_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_TREADY;
reg img_data_V_ce0;
reg img_data_V_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln129_fu_334_p2;
wire   [0:0] or_ln132_fu_348_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] ap_phi_mux_eol_2_phi_fu_264_p4;
reg   [7:0] tmp_data_V_reg_382;
reg   [0:0] tmp_last_V_reg_390;
wire   [31:0] smax_cast_fu_301_p1;
reg   [31:0] smax_cast_reg_402;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln127_fu_314_p2;
wire    ap_CS_fsm_state4;
wire   [30:0] i_fu_319_p2;
reg   [30:0] i_reg_411;
wire   [31:0] val_fu_325_p2;
reg   [31:0] val_reg_416;
wire   [30:0] j_fu_339_p2;
reg    ap_predicate_op60_read_state5;
reg    ap_block_state5;
wire   [31:0] add_ln151_fu_359_p2;
reg    ap_block_state7;
reg   [0:0] axi_last_V_0_reg_113;
reg   [0:0] axi_last_V_3_reg_237;
wire    ap_CS_fsm_state8;
reg   [7:0] axi_data_V_0_reg_123;
reg   [7:0] axi_data_V_3_reg_249;
reg   [31:0] val_0_reg_133;
reg   [30:0] i_0_reg_145;
reg   [0:0] eol_reg_156;
reg   [0:0] ap_phi_mux_axi_last_V_2_phi_fu_216_p4;
reg   [7:0] axi_data_V_1_reg_167;
reg   [7:0] ap_phi_mux_p_Val2_s_phi_fu_228_p4;
reg  signed [31:0] val_assign_reg_178;
reg   [0:0] eol_0_reg_188;
reg   [30:0] j_0_reg_200;
wire    ap_CS_fsm_state6;
reg   [0:0] eol_2_reg_261;
wire  signed [63:0] sext_ln650_fu_354_p1;
reg   [0:0] sof_1_fu_66;
wire   [0:0] empty_25_fu_285_p2;
wire   [30:0] empty_26_fu_290_p1;
wire   [30:0] smax_fu_293_p3;
wire   [31:0] zext_ln127_fu_310_p1;
wire   [31:0] zext_ln134_fu_330_p1;
wire   [0:0] tmp_user_V_fu_281_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_data_V_0_reg_123 <= axi_data_V_3_reg_249;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_data_V_0_reg_123 <= tmp_data_V_reg_382;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_src_TVALID == 1'b0) & (ap_predicate_op60_read_state5 == 1'b1)) & (icmp_ln129_fu_334_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        axi_data_V_1_reg_167 <= ap_phi_mux_p_Val2_s_phi_fu_228_p4;
    end else if (((icmp_ln127_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        axi_data_V_1_reg_167 <= axi_data_V_0_reg_123;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        axi_data_V_3_reg_249 <= axi_data_V_1_reg_167;
    end else if ((~((eol_2_reg_261 == 1'd0) & (p_src_TVALID == 1'b0)) & (eol_2_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        axi_data_V_3_reg_249 <= p_src_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_last_V_0_reg_113 <= axi_last_V_3_reg_237;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_last_V_0_reg_113 <= tmp_last_V_reg_390;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        axi_last_V_3_reg_237 <= eol_reg_156;
    end else if ((~((eol_2_reg_261 == 1'd0) & (p_src_TVALID == 1'b0)) & (eol_2_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        axi_last_V_3_reg_237 <= p_src_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_src_TVALID == 1'b0) & (ap_predicate_op60_read_state5 == 1'b1)) & (icmp_ln129_fu_334_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        eol_0_reg_188 <= ap_phi_mux_axi_last_V_2_phi_fu_216_p4;
    end else if (((icmp_ln127_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_0_reg_188 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        eol_2_reg_261 <= eol_0_reg_188;
    end else if ((~((eol_2_reg_261 == 1'd0) & (p_src_TVALID == 1'b0)) & (eol_2_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        eol_2_reg_261 <= p_src_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_src_TVALID == 1'b0) & (ap_predicate_op60_read_state5 == 1'b1)) & (icmp_ln129_fu_334_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        eol_reg_156 <= ap_phi_mux_axi_last_V_2_phi_fu_216_p4;
    end else if (((icmp_ln127_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_reg_156 <= axi_last_V_0_reg_113;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_reg_145 <= i_reg_411;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_145 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_src_TVALID == 1'b0) & (ap_predicate_op60_read_state5 == 1'b1)) & (icmp_ln129_fu_334_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_0_reg_200 <= j_fu_339_p2;
    end else if (((icmp_ln127_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_200 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_src_TVALID == 1'b0) & (ap_predicate_op60_read_state5 == 1'b1)) & (icmp_ln129_fu_334_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        sof_1_fu_66 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sof_1_fu_66 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        val_0_reg_133 <= val_reg_416;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        val_0_reg_133 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_src_TVALID == 1'b0) & (ap_predicate_op60_read_state5 == 1'b1)) & (icmp_ln129_fu_334_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        val_assign_reg_178 <= add_ln151_fu_359_p2;
    end else if (((icmp_ln127_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        val_assign_reg_178 <= val_0_reg_133;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_411 <= i_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        smax_cast_reg_402[30 : 0] <= smax_cast_fu_301_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((p_src_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_V_reg_382 <= p_src_TDATA;
        tmp_last_V_reg_390 <= p_src_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        val_reg_416 <= val_fu_325_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln127_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_fu_334_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        if ((or_ln132_fu_348_p2 == 1'd1)) begin
            ap_phi_mux_axi_last_V_2_phi_fu_216_p4 = eol_reg_156;
        end else if ((or_ln132_fu_348_p2 == 1'd0)) begin
            ap_phi_mux_axi_last_V_2_phi_fu_216_p4 = p_src_TLAST;
        end else begin
            ap_phi_mux_axi_last_V_2_phi_fu_216_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_axi_last_V_2_phi_fu_216_p4 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln129_fu_334_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        if ((or_ln132_fu_348_p2 == 1'd1)) begin
            ap_phi_mux_p_Val2_s_phi_fu_228_p4 = axi_data_V_1_reg_167;
        end else if ((or_ln132_fu_348_p2 == 1'd0)) begin
            ap_phi_mux_p_Val2_s_phi_fu_228_p4 = p_src_TDATA;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_228_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_228_p4 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln127_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_src_TVALID == 1'b0) & (ap_predicate_op60_read_state5 == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
        img_data_V_ce0 = 1'b1;
    end else begin
        img_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_src_TVALID == 1'b0) & (ap_predicate_op60_read_state5 == 1'b1)) & (icmp_ln129_fu_334_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        img_data_V_we0 = 1'b1;
    end else begin
        img_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((eol_2_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((or_ln132_fu_348_p2 == 1'd0) & (icmp_ln129_fu_334_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        p_src_TDATA_blk_n = p_src_TVALID;
    end else begin
        p_src_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((eol_2_reg_261 == 1'd0) & (p_src_TVALID == 1'b0)) & (eol_2_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | (~((p_src_TVALID == 1'b0) & (ap_predicate_op60_read_state5 == 1'b1)) & (1'b1 == ap_CS_fsm_state5) & (ap_predicate_op60_read_state5 == 1'b1)) | ((p_src_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        p_src_TREADY = 1'b1;
    end else begin
        p_src_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_user_V_fu_281_p1 == 1'd0) & (p_src_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((tmp_user_V_fu_281_p1 == 1'd1) & (p_src_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln127_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((p_src_TVALID == 1'b0) & (ap_predicate_op60_read_state5 == 1'b1)) & (icmp_ln129_fu_334_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~((p_src_TVALID == 1'b0) & (ap_predicate_op60_read_state5 == 1'b1)) & (icmp_ln129_fu_334_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if ((~((eol_2_reg_261 == 1'd0) & (p_src_TVALID == 1'b0)) & (eol_2_reg_261 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~((eol_2_reg_261 == 1'd0) & (p_src_TVALID == 1'b0)) & (ap_phi_mux_eol_2_phi_fu_264_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln151_fu_359_p2 = ($signed(val_assign_reg_178) + $signed(32'd1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state5 = ((p_src_TVALID == 1'b0) & (ap_predicate_op60_read_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state7 = ((eol_2_reg_261 == 1'd0) & (p_src_TVALID == 1'b0));
end

assign ap_phi_mux_eol_2_phi_fu_264_p4 = eol_2_reg_261;

always @ (*) begin
    ap_predicate_op60_read_state5 = ((or_ln132_fu_348_p2 == 1'd0) & (icmp_ln129_fu_334_p2 == 1'd1));
end

assign empty_25_fu_285_p2 = (($signed(img_cols_read) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign empty_26_fu_290_p1 = img_cols_read[30:0];

assign i_fu_319_p2 = (i_0_reg_145 + 31'd1);

assign icmp_ln127_fu_314_p2 = (($signed(zext_ln127_fu_310_p1) < $signed(img_rows_read)) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_334_p2 = (($signed(zext_ln134_fu_330_p1) < $signed(img_cols_read)) ? 1'b1 : 1'b0);

assign img_data_V_address0 = sext_ln650_fu_354_p1;

assign img_data_V_d0 = ap_phi_mux_p_Val2_s_phi_fu_228_p4;

assign j_fu_339_p2 = (j_0_reg_200 + 31'd1);

assign or_ln132_fu_348_p2 = (sof_1_fu_66 | eol_0_reg_188);

assign sext_ln650_fu_354_p1 = val_assign_reg_178;

assign smax_cast_fu_301_p1 = smax_fu_293_p3;

assign smax_fu_293_p3 = ((empty_25_fu_285_p2[0:0] === 1'b1) ? empty_26_fu_290_p1 : 31'd0);

assign tmp_user_V_fu_281_p1 = p_src_TUSER;

assign val_fu_325_p2 = (smax_cast_reg_402 + val_0_reg_133);

assign zext_ln127_fu_310_p1 = i_0_reg_145;

assign zext_ln134_fu_330_p1 = j_0_reg_200;

always @ (posedge ap_clk) begin
    smax_cast_reg_402[31] <= 1'b0;
end

endmodule //AXIvideo2xfMat
