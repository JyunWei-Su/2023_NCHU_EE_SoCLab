// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module xfMat2AXIvideo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_rows_read,
        img_cols_read,
        img_data_V_address0,
        img_data_V_ce0,
        img_data_V_q0,
        p_dst_TDATA,
        p_dst_TVALID,
        p_dst_TREADY,
        p_dst_TKEEP,
        p_dst_TSTRB,
        p_dst_TUSER,
        p_dst_TLAST,
        p_dst_TID,
        p_dst_TDEST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] img_rows_read;
input  [31:0] img_cols_read;
output  [11:0] img_data_V_address0;
output   img_data_V_ce0;
input  [7:0] img_data_V_q0;
output  [7:0] p_dst_TDATA;
output   p_dst_TVALID;
input   p_dst_TREADY;
output  [0:0] p_dst_TKEEP;
output  [0:0] p_dst_TSTRB;
output  [0:0] p_dst_TUSER;
output  [0:0] p_dst_TLAST;
output  [0:0] p_dst_TID;
output  [0:0] p_dst_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_data_V_ce0;
reg p_dst_TVALID;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_dst_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln187_reg_303;
reg  signed [31:0] index_assign_reg_148;
reg   [30:0] j_0_reg_158;
wire   [31:0] smax_cast_fu_187_p1;
reg   [31:0] smax_cast_reg_279;
wire   [31:0] add_ln197_fu_191_p2;
reg   [31:0] add_ln197_reg_284;
wire   [0:0] icmp_ln186_fu_206_p2;
wire    ap_CS_fsm_state2;
wire   [30:0] i_fu_211_p2;
reg   [30:0] i_reg_293;
wire   [31:0] index_fu_217_p2;
reg   [31:0] index_reg_298;
wire   [0:0] icmp_ln187_fu_226_p2;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] j_fu_231_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] axi_last_V_fu_237_p2;
reg   [0:0] axi_last_V_reg_312;
wire   [31:0] add_ln203_fu_247_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [31:0] index_0_reg_125;
wire    ap_CS_fsm_state5;
reg   [30:0] i_0_reg_137;
wire  signed [63:0] sext_ln621_fu_242_p1;
reg   [0:0] tmp_user_V_fu_66;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] empty_fu_169_p2;
wire   [30:0] empty_5_fu_175_p1;
wire   [30:0] smax_fu_179_p3;
wire   [31:0] zext_ln186_fu_202_p1;
wire   [31:0] zext_ln187_fu_222_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln186_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln186_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_137 <= i_reg_293;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_137 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        index_0_reg_125 <= index_reg_298;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        index_0_reg_125 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln187_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        index_assign_reg_148 <= add_ln203_fu_247_p2;
    end else if (((icmp_ln186_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        index_assign_reg_148 <= index_0_reg_125;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln187_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_0_reg_158 <= j_fu_231_p2;
    end else if (((icmp_ln186_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_158 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln187_reg_303 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_user_V_fu_66 <= 1'd0;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_user_V_fu_66 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln197_reg_284 <= add_ln197_fu_191_p2;
        smax_cast_reg_279[30 : 0] <= smax_cast_fu_187_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln187_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axi_last_V_reg_312 <= axi_last_V_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_293 <= i_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln187_reg_303 <= icmp_ln187_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln186_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        index_reg_298 <= index_fu_217_p2;
    end
end

always @ (*) begin
    if ((icmp_ln187_fu_226_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln186_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln186_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        img_data_V_ce0 = 1'b1;
    end else begin
        img_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln187_reg_303 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dst_TDATA_blk_n = p_dst_TREADY;
    end else begin
        p_dst_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln187_reg_303 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dst_TVALID = 1'b1;
    end else begin
        p_dst_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln186_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln187_fu_226_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln187_fu_226_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln197_fu_191_p2 = ($signed(32'd4294967295) + $signed(img_cols_read));

assign add_ln203_fu_247_p2 = ($signed(index_assign_reg_148) + $signed(32'd1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln187_reg_303 == 1'd1) & (p_dst_TREADY == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign axi_last_V_fu_237_p2 = ((zext_ln187_fu_222_p1 == add_ln197_reg_284) ? 1'b1 : 1'b0);

assign empty_5_fu_175_p1 = img_cols_read[30:0];

assign empty_fu_169_p2 = (($signed(img_cols_read) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign i_fu_211_p2 = (i_0_reg_137 + 31'd1);

assign icmp_ln186_fu_206_p2 = (($signed(zext_ln186_fu_202_p1) < $signed(img_rows_read)) ? 1'b1 : 1'b0);

assign icmp_ln187_fu_226_p2 = (($signed(zext_ln187_fu_222_p1) < $signed(img_cols_read)) ? 1'b1 : 1'b0);

assign img_data_V_address0 = sext_ln621_fu_242_p1;

assign index_fu_217_p2 = (smax_cast_reg_279 + index_0_reg_125);

assign j_fu_231_p2 = (j_0_reg_158 + 31'd1);

assign p_dst_TDATA = img_data_V_q0;

assign p_dst_TDEST = 1'd0;

assign p_dst_TID = 1'd0;

assign p_dst_TKEEP = 1'd1;

assign p_dst_TLAST = axi_last_V_reg_312;

assign p_dst_TSTRB = 1'd0;

assign p_dst_TUSER = tmp_user_V_fu_66;

assign sext_ln621_fu_242_p1 = index_assign_reg_148;

assign smax_cast_fu_187_p1 = smax_fu_179_p3;

assign smax_fu_179_p3 = ((empty_fu_169_p2[0:0] === 1'b1) ? empty_5_fu_175_p1 : 31'd0);

assign zext_ln186_fu_202_p1 = i_0_reg_137;

assign zext_ln187_fu_222_p1 = j_0_reg_158;

always @ (posedge ap_clk) begin
    smax_cast_reg_279[31] <= 1'b0;
end

endmodule //xfMat2AXIvideo
