-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Sobel_Stream is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    p_src_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_TVALID : IN STD_LOGIC;
    p_src_TREADY : OUT STD_LOGIC;
    p_src_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    p_dst_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_TVALID : OUT STD_LOGIC;
    p_dst_TREADY : IN STD_LOGIC;
    p_dst_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Sobel_Stream is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Sobel_Stream,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.050250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=1477,HLS_SYN_LUT=2987,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal p_src_V_data_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal p_src_V_data_V_0_vld_in : STD_LOGIC;
    signal p_src_V_data_V_0_vld_out : STD_LOGIC;
    signal p_src_V_data_V_0_ack_in : STD_LOGIC;
    signal p_src_V_data_V_0_ack_out : STD_LOGIC;
    signal p_src_V_data_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal p_src_V_data_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal p_src_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal p_src_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal p_src_V_data_V_0_sel : STD_LOGIC;
    signal p_src_V_data_V_0_load_A : STD_LOGIC;
    signal p_src_V_data_V_0_load_B : STD_LOGIC;
    signal p_src_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal p_src_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal p_src_V_keep_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_keep_V_0_vld_in : STD_LOGIC;
    signal p_src_V_keep_V_0_vld_out : STD_LOGIC;
    signal p_src_V_keep_V_0_ack_in : STD_LOGIC;
    signal p_src_V_keep_V_0_ack_out : STD_LOGIC;
    signal p_src_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal p_src_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal p_src_V_keep_V_0_sel : STD_LOGIC;
    signal p_src_V_keep_V_0_load_A : STD_LOGIC;
    signal p_src_V_keep_V_0_load_B : STD_LOGIC;
    signal p_src_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal p_src_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal p_src_V_strb_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_strb_V_0_vld_in : STD_LOGIC;
    signal p_src_V_strb_V_0_vld_out : STD_LOGIC;
    signal p_src_V_strb_V_0_ack_in : STD_LOGIC;
    signal p_src_V_strb_V_0_ack_out : STD_LOGIC;
    signal p_src_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal p_src_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal p_src_V_strb_V_0_sel : STD_LOGIC;
    signal p_src_V_strb_V_0_load_A : STD_LOGIC;
    signal p_src_V_strb_V_0_load_B : STD_LOGIC;
    signal p_src_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal p_src_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal p_src_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_user_V_0_vld_in : STD_LOGIC;
    signal p_src_V_user_V_0_vld_out : STD_LOGIC;
    signal p_src_V_user_V_0_ack_in : STD_LOGIC;
    signal p_src_V_user_V_0_ack_out : STD_LOGIC;
    signal p_src_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal p_src_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal p_src_V_user_V_0_sel : STD_LOGIC;
    signal p_src_V_user_V_0_load_A : STD_LOGIC;
    signal p_src_V_user_V_0_load_B : STD_LOGIC;
    signal p_src_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal p_src_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal p_src_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_last_V_0_vld_in : STD_LOGIC;
    signal p_src_V_last_V_0_vld_out : STD_LOGIC;
    signal p_src_V_last_V_0_ack_in : STD_LOGIC;
    signal p_src_V_last_V_0_ack_out : STD_LOGIC;
    signal p_src_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal p_src_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal p_src_V_last_V_0_sel : STD_LOGIC;
    signal p_src_V_last_V_0_load_A : STD_LOGIC;
    signal p_src_V_last_V_0_load_B : STD_LOGIC;
    signal p_src_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal p_src_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal p_src_V_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_id_V_0_vld_in : STD_LOGIC;
    signal p_src_V_id_V_0_vld_out : STD_LOGIC;
    signal p_src_V_id_V_0_ack_in : STD_LOGIC;
    signal p_src_V_id_V_0_ack_out : STD_LOGIC;
    signal p_src_V_id_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_id_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal p_src_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal p_src_V_id_V_0_sel : STD_LOGIC;
    signal p_src_V_id_V_0_load_A : STD_LOGIC;
    signal p_src_V_id_V_0_load_B : STD_LOGIC;
    signal p_src_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal p_src_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal p_src_V_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_dest_V_0_vld_in : STD_LOGIC;
    signal p_src_V_dest_V_0_vld_out : STD_LOGIC;
    signal p_src_V_dest_V_0_ack_in : STD_LOGIC;
    signal p_src_V_dest_V_0_ack_out : STD_LOGIC;
    signal p_src_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal p_src_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal p_src_V_dest_V_0_sel : STD_LOGIC;
    signal p_src_V_dest_V_0_load_A : STD_LOGIC;
    signal p_src_V_dest_V_0_load_B : STD_LOGIC;
    signal p_src_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal p_src_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal p_dst_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal p_dst_V_data_V_1_vld_in : STD_LOGIC;
    signal p_dst_V_data_V_1_vld_out : STD_LOGIC;
    signal p_dst_V_data_V_1_ack_in : STD_LOGIC;
    signal p_dst_V_data_V_1_ack_out : STD_LOGIC;
    signal p_dst_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal p_dst_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal p_dst_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal p_dst_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal p_dst_V_data_V_1_sel : STD_LOGIC;
    signal p_dst_V_data_V_1_load_A : STD_LOGIC;
    signal p_dst_V_data_V_1_load_B : STD_LOGIC;
    signal p_dst_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal p_dst_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal p_dst_V_keep_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_keep_V_1_vld_in : STD_LOGIC;
    signal p_dst_V_keep_V_1_vld_out : STD_LOGIC;
    signal p_dst_V_keep_V_1_ack_in : STD_LOGIC;
    signal p_dst_V_keep_V_1_ack_out : STD_LOGIC;
    signal p_dst_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal p_dst_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal p_dst_V_keep_V_1_sel : STD_LOGIC;
    signal p_dst_V_keep_V_1_load_A : STD_LOGIC;
    signal p_dst_V_keep_V_1_load_B : STD_LOGIC;
    signal p_dst_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal p_dst_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal p_dst_V_strb_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_strb_V_1_vld_in : STD_LOGIC;
    signal p_dst_V_strb_V_1_vld_out : STD_LOGIC;
    signal p_dst_V_strb_V_1_ack_in : STD_LOGIC;
    signal p_dst_V_strb_V_1_ack_out : STD_LOGIC;
    signal p_dst_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal p_dst_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal p_dst_V_strb_V_1_sel : STD_LOGIC;
    signal p_dst_V_strb_V_1_load_A : STD_LOGIC;
    signal p_dst_V_strb_V_1_load_B : STD_LOGIC;
    signal p_dst_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal p_dst_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal p_dst_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_user_V_1_vld_in : STD_LOGIC;
    signal p_dst_V_user_V_1_vld_out : STD_LOGIC;
    signal p_dst_V_user_V_1_ack_in : STD_LOGIC;
    signal p_dst_V_user_V_1_ack_out : STD_LOGIC;
    signal p_dst_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal p_dst_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal p_dst_V_user_V_1_sel : STD_LOGIC;
    signal p_dst_V_user_V_1_load_A : STD_LOGIC;
    signal p_dst_V_user_V_1_load_B : STD_LOGIC;
    signal p_dst_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal p_dst_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal p_dst_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_last_V_1_vld_in : STD_LOGIC;
    signal p_dst_V_last_V_1_vld_out : STD_LOGIC;
    signal p_dst_V_last_V_1_ack_in : STD_LOGIC;
    signal p_dst_V_last_V_1_ack_out : STD_LOGIC;
    signal p_dst_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal p_dst_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal p_dst_V_last_V_1_sel : STD_LOGIC;
    signal p_dst_V_last_V_1_load_A : STD_LOGIC;
    signal p_dst_V_last_V_1_load_B : STD_LOGIC;
    signal p_dst_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal p_dst_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal p_dst_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_id_V_1_vld_in : STD_LOGIC;
    signal p_dst_V_id_V_1_vld_out : STD_LOGIC;
    signal p_dst_V_id_V_1_ack_in : STD_LOGIC;
    signal p_dst_V_id_V_1_ack_out : STD_LOGIC;
    signal p_dst_V_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal p_dst_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal p_dst_V_id_V_1_sel : STD_LOGIC;
    signal p_dst_V_id_V_1_load_A : STD_LOGIC;
    signal p_dst_V_id_V_1_load_B : STD_LOGIC;
    signal p_dst_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal p_dst_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal p_dst_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_dest_V_1_vld_in : STD_LOGIC;
    signal p_dst_V_dest_V_1_vld_out : STD_LOGIC;
    signal p_dst_V_dest_V_1_ack_in : STD_LOGIC;
    signal p_dst_V_dest_V_1_ack_out : STD_LOGIC;
    signal p_dst_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal p_dst_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal p_dst_V_dest_V_1_sel : STD_LOGIC;
    signal p_dst_V_dest_V_1_load_A : STD_LOGIC;
    signal p_dst_V_dest_V_1_load_B : STD_LOGIC;
    signal p_dst_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal p_dst_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal height : STD_LOGIC_VECTOR (31 downto 0);
    signal width : STD_LOGIC_VECTOR (31 downto 0);
    signal width_read_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal height_read_reg_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ImgInput_data_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_ImgInput_data_V_ce0 : STD_LOGIC;
    signal p_ImgInput_data_V_we0 : STD_LOGIC;
    signal p_ImgInput_data_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_ImgSobelx_data_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_ImgSobelx_data_V_ce0 : STD_LOGIC;
    signal p_ImgSobelx_data_V_we0 : STD_LOGIC;
    signal p_ImgSobelx_data_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Sobel_fu_88_ap_start : STD_LOGIC;
    signal grp_Sobel_fu_88_ap_done : STD_LOGIC;
    signal grp_Sobel_fu_88_ap_idle : STD_LOGIC;
    signal grp_Sobel_fu_88_ap_ready : STD_LOGIC;
    signal grp_Sobel_fu_88_p_src_mat_data_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Sobel_fu_88_p_src_mat_data_V_ce0 : STD_LOGIC;
    signal grp_Sobel_fu_88_p_dst_matx_data_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Sobel_fu_88_p_dst_matx_data_V_ce0 : STD_LOGIC;
    signal grp_Sobel_fu_88_p_dst_matx_data_V_we0 : STD_LOGIC;
    signal grp_Sobel_fu_88_p_dst_matx_data_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Sobel_fu_88_p_dst_maty_data_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Sobel_fu_88_p_dst_maty_data_V_ce0 : STD_LOGIC;
    signal grp_Sobel_fu_88_p_dst_maty_data_V_we0 : STD_LOGIC;
    signal grp_Sobel_fu_88_p_dst_maty_data_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xfMat2AXIvideo_fu_97_ap_start : STD_LOGIC;
    signal grp_xfMat2AXIvideo_fu_97_ap_done : STD_LOGIC;
    signal grp_xfMat2AXIvideo_fu_97_ap_idle : STD_LOGIC;
    signal grp_xfMat2AXIvideo_fu_97_ap_ready : STD_LOGIC;
    signal grp_xfMat2AXIvideo_fu_97_img_data_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_xfMat2AXIvideo_fu_97_img_data_V_ce0 : STD_LOGIC;
    signal grp_xfMat2AXIvideo_fu_97_p_dst_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xfMat2AXIvideo_fu_97_p_dst_TVALID : STD_LOGIC;
    signal grp_xfMat2AXIvideo_fu_97_p_dst_TREADY : STD_LOGIC;
    signal grp_xfMat2AXIvideo_fu_97_p_dst_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfMat2AXIvideo_fu_97_p_dst_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfMat2AXIvideo_fu_97_p_dst_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfMat2AXIvideo_fu_97_p_dst_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfMat2AXIvideo_fu_97_p_dst_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfMat2AXIvideo_fu_97_p_dst_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AXIvideo2xfMat_fu_118_ap_start : STD_LOGIC;
    signal grp_AXIvideo2xfMat_fu_118_ap_done : STD_LOGIC;
    signal grp_AXIvideo2xfMat_fu_118_ap_idle : STD_LOGIC;
    signal grp_AXIvideo2xfMat_fu_118_ap_ready : STD_LOGIC;
    signal grp_AXIvideo2xfMat_fu_118_p_src_TVALID : STD_LOGIC;
    signal grp_AXIvideo2xfMat_fu_118_p_src_TREADY : STD_LOGIC;
    signal grp_AXIvideo2xfMat_fu_118_img_data_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_AXIvideo2xfMat_fu_118_img_data_V_ce0 : STD_LOGIC;
    signal grp_AXIvideo2xfMat_fu_118_img_data_V_we0 : STD_LOGIC;
    signal grp_AXIvideo2xfMat_fu_118_img_data_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Sobel_fu_88_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_xfMat2AXIvideo_fu_97_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_AXIvideo2xfMat_fu_118_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component Sobel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_mat_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_mat_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_mat_data_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_src_mat_data_V_ce0 : OUT STD_LOGIC;
        p_src_mat_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_dst_matx_data_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_dst_matx_data_V_ce0 : OUT STD_LOGIC;
        p_dst_matx_data_V_we0 : OUT STD_LOGIC;
        p_dst_matx_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_maty_data_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_dst_maty_data_V_ce0 : OUT STD_LOGIC;
        p_dst_maty_data_V_we0 : OUT STD_LOGIC;
        p_dst_maty_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component xfMat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
        img_data_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_data_V_ce0 : OUT STD_LOGIC;
        img_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_dst_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_TVALID : OUT STD_LOGIC;
        p_dst_TREADY : IN STD_LOGIC;
        p_dst_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component AXIvideo2xfMat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_TVALID : IN STD_LOGIC;
        p_src_TREADY : OUT STD_LOGIC;
        p_src_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
        p_src_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        p_src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        p_src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        p_src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        p_src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
        img_data_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_data_V_ce0 : OUT STD_LOGIC;
        img_data_V_we0 : OUT STD_LOGIC;
        img_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Sobel_Stream_p_ImfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Sobel_Stream_p_Imhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Sobel_Stream_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        height : OUT STD_LOGIC_VECTOR (31 downto 0);
        width : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Sobel_Stream_control_s_axi_U : component Sobel_Stream_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        height => height,
        width => width);

    p_ImgInput_data_V_U : component Sobel_Stream_p_ImfYi
    generic map (
        DataWidth => 8,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => p_ImgInput_data_V_address0,
        ce0 => p_ImgInput_data_V_ce0,
        we0 => p_ImgInput_data_V_we0,
        d0 => grp_AXIvideo2xfMat_fu_118_img_data_V_d0,
        q0 => p_ImgInput_data_V_q0);

    p_ImgSobelx_data_V_U : component Sobel_Stream_p_ImfYi
    generic map (
        DataWidth => 8,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => p_ImgSobelx_data_V_address0,
        ce0 => p_ImgSobelx_data_V_ce0,
        we0 => p_ImgSobelx_data_V_we0,
        d0 => grp_Sobel_fu_88_p_dst_matx_data_V_d0,
        q0 => p_ImgSobelx_data_V_q0);

    p_ImgSobely_data_V_U : component Sobel_Stream_p_Imhbi
    generic map (
        DataWidth => 8,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Sobel_fu_88_p_dst_maty_data_V_address0,
        ce0 => grp_Sobel_fu_88_p_dst_maty_data_V_ce0,
        we0 => grp_Sobel_fu_88_p_dst_maty_data_V_we0,
        d0 => grp_Sobel_fu_88_p_dst_maty_data_V_d0);

    grp_Sobel_fu_88 : component Sobel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Sobel_fu_88_ap_start,
        ap_done => grp_Sobel_fu_88_ap_done,
        ap_idle => grp_Sobel_fu_88_ap_idle,
        ap_ready => grp_Sobel_fu_88_ap_ready,
        p_src_mat_rows_read => height_read_reg_148,
        p_src_mat_cols_read => width_read_reg_141,
        p_src_mat_data_V_address0 => grp_Sobel_fu_88_p_src_mat_data_V_address0,
        p_src_mat_data_V_ce0 => grp_Sobel_fu_88_p_src_mat_data_V_ce0,
        p_src_mat_data_V_q0 => p_ImgInput_data_V_q0,
        p_dst_matx_data_V_address0 => grp_Sobel_fu_88_p_dst_matx_data_V_address0,
        p_dst_matx_data_V_ce0 => grp_Sobel_fu_88_p_dst_matx_data_V_ce0,
        p_dst_matx_data_V_we0 => grp_Sobel_fu_88_p_dst_matx_data_V_we0,
        p_dst_matx_data_V_d0 => grp_Sobel_fu_88_p_dst_matx_data_V_d0,
        p_dst_maty_data_V_address0 => grp_Sobel_fu_88_p_dst_maty_data_V_address0,
        p_dst_maty_data_V_ce0 => grp_Sobel_fu_88_p_dst_maty_data_V_ce0,
        p_dst_maty_data_V_we0 => grp_Sobel_fu_88_p_dst_maty_data_V_we0,
        p_dst_maty_data_V_d0 => grp_Sobel_fu_88_p_dst_maty_data_V_d0);

    grp_xfMat2AXIvideo_fu_97 : component xfMat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_xfMat2AXIvideo_fu_97_ap_start,
        ap_done => grp_xfMat2AXIvideo_fu_97_ap_done,
        ap_idle => grp_xfMat2AXIvideo_fu_97_ap_idle,
        ap_ready => grp_xfMat2AXIvideo_fu_97_ap_ready,
        img_rows_read => height_read_reg_148,
        img_cols_read => width_read_reg_141,
        img_data_V_address0 => grp_xfMat2AXIvideo_fu_97_img_data_V_address0,
        img_data_V_ce0 => grp_xfMat2AXIvideo_fu_97_img_data_V_ce0,
        img_data_V_q0 => p_ImgSobelx_data_V_q0,
        p_dst_TDATA => grp_xfMat2AXIvideo_fu_97_p_dst_TDATA,
        p_dst_TVALID => grp_xfMat2AXIvideo_fu_97_p_dst_TVALID,
        p_dst_TREADY => grp_xfMat2AXIvideo_fu_97_p_dst_TREADY,
        p_dst_TKEEP => grp_xfMat2AXIvideo_fu_97_p_dst_TKEEP,
        p_dst_TSTRB => grp_xfMat2AXIvideo_fu_97_p_dst_TSTRB,
        p_dst_TUSER => grp_xfMat2AXIvideo_fu_97_p_dst_TUSER,
        p_dst_TLAST => grp_xfMat2AXIvideo_fu_97_p_dst_TLAST,
        p_dst_TID => grp_xfMat2AXIvideo_fu_97_p_dst_TID,
        p_dst_TDEST => grp_xfMat2AXIvideo_fu_97_p_dst_TDEST);

    grp_AXIvideo2xfMat_fu_118 : component AXIvideo2xfMat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AXIvideo2xfMat_fu_118_ap_start,
        ap_done => grp_AXIvideo2xfMat_fu_118_ap_done,
        ap_idle => grp_AXIvideo2xfMat_fu_118_ap_idle,
        ap_ready => grp_AXIvideo2xfMat_fu_118_ap_ready,
        p_src_TDATA => p_src_V_data_V_0_data_out,
        p_src_TVALID => grp_AXIvideo2xfMat_fu_118_p_src_TVALID,
        p_src_TREADY => grp_AXIvideo2xfMat_fu_118_p_src_TREADY,
        p_src_TKEEP => p_src_V_keep_V_0_data_out,
        p_src_TSTRB => p_src_V_strb_V_0_data_out,
        p_src_TUSER => p_src_V_user_V_0_data_out,
        p_src_TLAST => p_src_V_last_V_0_data_out,
        p_src_TID => p_src_V_id_V_0_data_out,
        p_src_TDEST => p_src_V_dest_V_0_data_out,
        img_rows_read => height_read_reg_148,
        img_cols_read => width_read_reg_141,
        img_data_V_address0 => grp_AXIvideo2xfMat_fu_118_img_data_V_address0,
        img_data_V_ce0 => grp_AXIvideo2xfMat_fu_118_img_data_V_ce0,
        img_data_V_we0 => grp_AXIvideo2xfMat_fu_118_img_data_V_we0,
        img_data_V_d0 => grp_AXIvideo2xfMat_fu_118_img_data_V_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_AXIvideo2xfMat_fu_118_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_AXIvideo2xfMat_fu_118_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_AXIvideo2xfMat_fu_118_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AXIvideo2xfMat_fu_118_ap_ready = ap_const_logic_1)) then 
                    grp_AXIvideo2xfMat_fu_118_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Sobel_fu_88_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Sobel_fu_88_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_Sobel_fu_88_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Sobel_fu_88_ap_ready = ap_const_logic_1)) then 
                    grp_Sobel_fu_88_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_xfMat2AXIvideo_fu_97_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_xfMat2AXIvideo_fu_97_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_xfMat2AXIvideo_fu_97_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xfMat2AXIvideo_fu_97_ap_ready = ap_const_logic_1)) then 
                    grp_xfMat2AXIvideo_fu_97_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((p_dst_V_data_V_1_ack_out = ap_const_logic_1) and (p_dst_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        p_dst_V_data_V_1_sel_rd <= not(p_dst_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((p_dst_V_data_V_1_ack_in = ap_const_logic_1) and (p_dst_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        p_dst_V_data_V_1_sel_wr <= not(p_dst_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((p_dst_V_data_V_1_state = ap_const_lv2_2) and (p_dst_V_data_V_1_vld_in = ap_const_logic_0)) or ((p_dst_V_data_V_1_state = ap_const_lv2_3) and (p_dst_V_data_V_1_vld_in = ap_const_logic_0) and (p_dst_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    p_dst_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((p_dst_V_data_V_1_state = ap_const_lv2_1) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_data_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0) and (p_dst_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    p_dst_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((p_dst_V_data_V_1_vld_in = ap_const_logic_0) and (p_dst_V_data_V_1_ack_out = ap_const_logic_1))) and not(((p_dst_TREADY = ap_const_logic_0) and (p_dst_V_data_V_1_vld_in = ap_const_logic_1))) and (p_dst_V_data_V_1_state = ap_const_lv2_3)) or ((p_dst_V_data_V_1_state = ap_const_lv2_1) and (p_dst_V_data_V_1_ack_out = ap_const_logic_1)) or ((p_dst_V_data_V_1_state = ap_const_lv2_2) and (p_dst_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    p_dst_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    p_dst_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((p_dst_V_dest_V_1_ack_out = ap_const_logic_1) and (p_dst_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        p_dst_V_dest_V_1_sel_rd <= not(p_dst_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((p_dst_V_dest_V_1_ack_in = ap_const_logic_1) and (p_dst_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        p_dst_V_dest_V_1_sel_wr <= not(p_dst_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((p_dst_V_dest_V_1_state = ap_const_lv2_2) and (p_dst_V_dest_V_1_vld_in = ap_const_logic_0)) or ((p_dst_V_dest_V_1_state = ap_const_lv2_3) and (p_dst_V_dest_V_1_vld_in = ap_const_logic_0) and (p_dst_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    p_dst_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((p_dst_V_dest_V_1_state = ap_const_lv2_1) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_dest_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0) and (p_dst_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    p_dst_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((p_dst_V_dest_V_1_vld_in = ap_const_logic_0) and (p_dst_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((p_dst_TREADY = ap_const_logic_0) and (p_dst_V_dest_V_1_vld_in = ap_const_logic_1))) and (p_dst_V_dest_V_1_state = ap_const_lv2_3)) or ((p_dst_V_dest_V_1_state = ap_const_lv2_1) and (p_dst_V_dest_V_1_ack_out = ap_const_logic_1)) or ((p_dst_V_dest_V_1_state = ap_const_lv2_2) and (p_dst_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    p_dst_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    p_dst_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((p_dst_V_id_V_1_ack_out = ap_const_logic_1) and (p_dst_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        p_dst_V_id_V_1_sel_rd <= not(p_dst_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((p_dst_V_id_V_1_ack_in = ap_const_logic_1) and (p_dst_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        p_dst_V_id_V_1_sel_wr <= not(p_dst_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((p_dst_V_id_V_1_state = ap_const_lv2_2) and (p_dst_V_id_V_1_vld_in = ap_const_logic_0)) or ((p_dst_V_id_V_1_state = ap_const_lv2_3) and (p_dst_V_id_V_1_vld_in = ap_const_logic_0) and (p_dst_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    p_dst_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((p_dst_V_id_V_1_state = ap_const_lv2_1) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_id_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0) and (p_dst_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    p_dst_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((p_dst_V_id_V_1_vld_in = ap_const_logic_0) and (p_dst_V_id_V_1_ack_out = ap_const_logic_1))) and not(((p_dst_TREADY = ap_const_logic_0) and (p_dst_V_id_V_1_vld_in = ap_const_logic_1))) and (p_dst_V_id_V_1_state = ap_const_lv2_3)) or ((p_dst_V_id_V_1_state = ap_const_lv2_1) and (p_dst_V_id_V_1_ack_out = ap_const_logic_1)) or ((p_dst_V_id_V_1_state = ap_const_lv2_2) and (p_dst_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    p_dst_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    p_dst_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((p_dst_V_keep_V_1_ack_out = ap_const_logic_1) and (p_dst_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        p_dst_V_keep_V_1_sel_rd <= not(p_dst_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((p_dst_V_keep_V_1_ack_in = ap_const_logic_1) and (p_dst_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        p_dst_V_keep_V_1_sel_wr <= not(p_dst_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((p_dst_V_keep_V_1_state = ap_const_lv2_2) and (p_dst_V_keep_V_1_vld_in = ap_const_logic_0)) or ((p_dst_V_keep_V_1_state = ap_const_lv2_3) and (p_dst_V_keep_V_1_vld_in = ap_const_logic_0) and (p_dst_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    p_dst_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((p_dst_V_keep_V_1_state = ap_const_lv2_1) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_keep_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0) and (p_dst_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    p_dst_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((p_dst_V_keep_V_1_vld_in = ap_const_logic_0) and (p_dst_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((p_dst_TREADY = ap_const_logic_0) and (p_dst_V_keep_V_1_vld_in = ap_const_logic_1))) and (p_dst_V_keep_V_1_state = ap_const_lv2_3)) or ((p_dst_V_keep_V_1_state = ap_const_lv2_1) and (p_dst_V_keep_V_1_ack_out = ap_const_logic_1)) or ((p_dst_V_keep_V_1_state = ap_const_lv2_2) and (p_dst_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    p_dst_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    p_dst_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((p_dst_V_last_V_1_ack_out = ap_const_logic_1) and (p_dst_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        p_dst_V_last_V_1_sel_rd <= not(p_dst_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((p_dst_V_last_V_1_ack_in = ap_const_logic_1) and (p_dst_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        p_dst_V_last_V_1_sel_wr <= not(p_dst_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((p_dst_V_last_V_1_state = ap_const_lv2_2) and (p_dst_V_last_V_1_vld_in = ap_const_logic_0)) or ((p_dst_V_last_V_1_state = ap_const_lv2_3) and (p_dst_V_last_V_1_vld_in = ap_const_logic_0) and (p_dst_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    p_dst_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((p_dst_V_last_V_1_state = ap_const_lv2_1) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_last_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0) and (p_dst_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    p_dst_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((p_dst_V_last_V_1_vld_in = ap_const_logic_0) and (p_dst_V_last_V_1_ack_out = ap_const_logic_1))) and not(((p_dst_TREADY = ap_const_logic_0) and (p_dst_V_last_V_1_vld_in = ap_const_logic_1))) and (p_dst_V_last_V_1_state = ap_const_lv2_3)) or ((p_dst_V_last_V_1_state = ap_const_lv2_1) and (p_dst_V_last_V_1_ack_out = ap_const_logic_1)) or ((p_dst_V_last_V_1_state = ap_const_lv2_2) and (p_dst_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    p_dst_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    p_dst_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((p_dst_V_strb_V_1_ack_out = ap_const_logic_1) and (p_dst_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        p_dst_V_strb_V_1_sel_rd <= not(p_dst_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((p_dst_V_strb_V_1_ack_in = ap_const_logic_1) and (p_dst_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        p_dst_V_strb_V_1_sel_wr <= not(p_dst_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((p_dst_V_strb_V_1_state = ap_const_lv2_2) and (p_dst_V_strb_V_1_vld_in = ap_const_logic_0)) or ((p_dst_V_strb_V_1_state = ap_const_lv2_3) and (p_dst_V_strb_V_1_vld_in = ap_const_logic_0) and (p_dst_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    p_dst_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((p_dst_V_strb_V_1_state = ap_const_lv2_1) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_strb_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0) and (p_dst_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    p_dst_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((p_dst_V_strb_V_1_vld_in = ap_const_logic_0) and (p_dst_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((p_dst_TREADY = ap_const_logic_0) and (p_dst_V_strb_V_1_vld_in = ap_const_logic_1))) and (p_dst_V_strb_V_1_state = ap_const_lv2_3)) or ((p_dst_V_strb_V_1_state = ap_const_lv2_1) and (p_dst_V_strb_V_1_ack_out = ap_const_logic_1)) or ((p_dst_V_strb_V_1_state = ap_const_lv2_2) and (p_dst_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    p_dst_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    p_dst_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((p_dst_V_user_V_1_ack_out = ap_const_logic_1) and (p_dst_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        p_dst_V_user_V_1_sel_rd <= not(p_dst_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((p_dst_V_user_V_1_ack_in = ap_const_logic_1) and (p_dst_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        p_dst_V_user_V_1_sel_wr <= not(p_dst_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    p_dst_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_dst_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((p_dst_V_user_V_1_state = ap_const_lv2_2) and (p_dst_V_user_V_1_vld_in = ap_const_logic_0)) or ((p_dst_V_user_V_1_state = ap_const_lv2_3) and (p_dst_V_user_V_1_vld_in = ap_const_logic_0) and (p_dst_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    p_dst_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((p_dst_V_user_V_1_state = ap_const_lv2_1) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_user_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0) and (p_dst_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    p_dst_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((p_dst_V_user_V_1_vld_in = ap_const_logic_0) and (p_dst_V_user_V_1_ack_out = ap_const_logic_1))) and not(((p_dst_TREADY = ap_const_logic_0) and (p_dst_V_user_V_1_vld_in = ap_const_logic_1))) and (p_dst_V_user_V_1_state = ap_const_lv2_3)) or ((p_dst_V_user_V_1_state = ap_const_lv2_1) and (p_dst_V_user_V_1_ack_out = ap_const_logic_1)) or ((p_dst_V_user_V_1_state = ap_const_lv2_2) and (p_dst_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    p_dst_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    p_dst_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_src_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((p_src_V_data_V_0_ack_out = ap_const_logic_1) and (p_src_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        p_src_V_data_V_0_sel_rd <= not(p_src_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    p_src_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((p_src_V_data_V_0_ack_in = ap_const_logic_1) and (p_src_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        p_src_V_data_V_0_sel_wr <= not(p_src_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    p_src_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((p_src_V_data_V_0_state = ap_const_lv2_2) and (p_src_V_data_V_0_vld_in = ap_const_logic_0)) or ((p_src_V_data_V_0_state = ap_const_lv2_3) and (p_src_V_data_V_0_vld_in = ap_const_logic_0) and (p_src_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    p_src_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((p_src_V_data_V_0_state = ap_const_lv2_1) and (p_src_V_data_V_0_ack_out = ap_const_logic_0)) or ((p_src_V_data_V_0_state = ap_const_lv2_3) and (p_src_V_data_V_0_ack_out = ap_const_logic_0) and (p_src_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    p_src_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((p_src_V_data_V_0_vld_in = ap_const_logic_0) and (p_src_V_data_V_0_ack_out = ap_const_logic_1))) and not(((p_src_V_data_V_0_ack_out = ap_const_logic_0) and (p_src_V_data_V_0_vld_in = ap_const_logic_1))) and (p_src_V_data_V_0_state = ap_const_lv2_3)) or ((p_src_V_data_V_0_state = ap_const_lv2_1) and (p_src_V_data_V_0_ack_out = ap_const_logic_1)) or ((p_src_V_data_V_0_state = ap_const_lv2_2) and (p_src_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    p_src_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    p_src_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_src_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((p_src_V_dest_V_0_ack_out = ap_const_logic_1) and (p_src_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        p_src_V_dest_V_0_sel_rd <= not(p_src_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    p_src_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((p_src_V_dest_V_0_ack_in = ap_const_logic_1) and (p_src_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        p_src_V_dest_V_0_sel_wr <= not(p_src_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    p_src_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((p_src_V_dest_V_0_state = ap_const_lv2_2) and (p_src_V_dest_V_0_vld_in = ap_const_logic_0)) or ((p_src_V_dest_V_0_state = ap_const_lv2_3) and (p_src_V_dest_V_0_vld_in = ap_const_logic_0) and (p_src_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    p_src_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((p_src_V_dest_V_0_state = ap_const_lv2_1) and (p_src_V_dest_V_0_ack_out = ap_const_logic_0)) or ((p_src_V_dest_V_0_state = ap_const_lv2_3) and (p_src_V_dest_V_0_ack_out = ap_const_logic_0) and (p_src_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    p_src_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((p_src_V_dest_V_0_vld_in = ap_const_logic_0) and (p_src_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((p_src_V_dest_V_0_ack_out = ap_const_logic_0) and (p_src_V_dest_V_0_vld_in = ap_const_logic_1))) and (p_src_V_dest_V_0_state = ap_const_lv2_3)) or ((p_src_V_dest_V_0_state = ap_const_lv2_1) and (p_src_V_dest_V_0_ack_out = ap_const_logic_1)) or ((p_src_V_dest_V_0_state = ap_const_lv2_2) and (p_src_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    p_src_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    p_src_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_src_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((p_src_V_id_V_0_ack_out = ap_const_logic_1) and (p_src_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        p_src_V_id_V_0_sel_rd <= not(p_src_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    p_src_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((p_src_V_id_V_0_ack_in = ap_const_logic_1) and (p_src_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        p_src_V_id_V_0_sel_wr <= not(p_src_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    p_src_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((p_src_V_id_V_0_state = ap_const_lv2_2) and (p_src_V_id_V_0_vld_in = ap_const_logic_0)) or ((p_src_V_id_V_0_state = ap_const_lv2_3) and (p_src_V_id_V_0_vld_in = ap_const_logic_0) and (p_src_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    p_src_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((p_src_V_id_V_0_state = ap_const_lv2_1) and (p_src_V_id_V_0_ack_out = ap_const_logic_0)) or ((p_src_V_id_V_0_state = ap_const_lv2_3) and (p_src_V_id_V_0_ack_out = ap_const_logic_0) and (p_src_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    p_src_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((p_src_V_id_V_0_vld_in = ap_const_logic_0) and (p_src_V_id_V_0_ack_out = ap_const_logic_1))) and not(((p_src_V_id_V_0_ack_out = ap_const_logic_0) and (p_src_V_id_V_0_vld_in = ap_const_logic_1))) and (p_src_V_id_V_0_state = ap_const_lv2_3)) or ((p_src_V_id_V_0_state = ap_const_lv2_1) and (p_src_V_id_V_0_ack_out = ap_const_logic_1)) or ((p_src_V_id_V_0_state = ap_const_lv2_2) and (p_src_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    p_src_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    p_src_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_src_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((p_src_V_keep_V_0_ack_out = ap_const_logic_1) and (p_src_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        p_src_V_keep_V_0_sel_rd <= not(p_src_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    p_src_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((p_src_V_keep_V_0_ack_in = ap_const_logic_1) and (p_src_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        p_src_V_keep_V_0_sel_wr <= not(p_src_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    p_src_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((p_src_V_keep_V_0_state = ap_const_lv2_2) and (p_src_V_keep_V_0_vld_in = ap_const_logic_0)) or ((p_src_V_keep_V_0_state = ap_const_lv2_3) and (p_src_V_keep_V_0_vld_in = ap_const_logic_0) and (p_src_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    p_src_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((p_src_V_keep_V_0_state = ap_const_lv2_1) and (p_src_V_keep_V_0_ack_out = ap_const_logic_0)) or ((p_src_V_keep_V_0_state = ap_const_lv2_3) and (p_src_V_keep_V_0_ack_out = ap_const_logic_0) and (p_src_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    p_src_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((p_src_V_keep_V_0_vld_in = ap_const_logic_0) and (p_src_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((p_src_V_keep_V_0_ack_out = ap_const_logic_0) and (p_src_V_keep_V_0_vld_in = ap_const_logic_1))) and (p_src_V_keep_V_0_state = ap_const_lv2_3)) or ((p_src_V_keep_V_0_state = ap_const_lv2_1) and (p_src_V_keep_V_0_ack_out = ap_const_logic_1)) or ((p_src_V_keep_V_0_state = ap_const_lv2_2) and (p_src_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    p_src_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    p_src_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_src_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((p_src_V_last_V_0_ack_out = ap_const_logic_1) and (p_src_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        p_src_V_last_V_0_sel_rd <= not(p_src_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    p_src_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((p_src_V_last_V_0_ack_in = ap_const_logic_1) and (p_src_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        p_src_V_last_V_0_sel_wr <= not(p_src_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    p_src_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((p_src_V_last_V_0_state = ap_const_lv2_2) and (p_src_V_last_V_0_vld_in = ap_const_logic_0)) or ((p_src_V_last_V_0_state = ap_const_lv2_3) and (p_src_V_last_V_0_vld_in = ap_const_logic_0) and (p_src_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    p_src_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((p_src_V_last_V_0_state = ap_const_lv2_1) and (p_src_V_last_V_0_ack_out = ap_const_logic_0)) or ((p_src_V_last_V_0_state = ap_const_lv2_3) and (p_src_V_last_V_0_ack_out = ap_const_logic_0) and (p_src_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    p_src_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((p_src_V_last_V_0_vld_in = ap_const_logic_0) and (p_src_V_last_V_0_ack_out = ap_const_logic_1))) and not(((p_src_V_last_V_0_ack_out = ap_const_logic_0) and (p_src_V_last_V_0_vld_in = ap_const_logic_1))) and (p_src_V_last_V_0_state = ap_const_lv2_3)) or ((p_src_V_last_V_0_state = ap_const_lv2_1) and (p_src_V_last_V_0_ack_out = ap_const_logic_1)) or ((p_src_V_last_V_0_state = ap_const_lv2_2) and (p_src_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    p_src_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    p_src_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_src_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((p_src_V_strb_V_0_ack_out = ap_const_logic_1) and (p_src_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        p_src_V_strb_V_0_sel_rd <= not(p_src_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    p_src_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((p_src_V_strb_V_0_ack_in = ap_const_logic_1) and (p_src_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        p_src_V_strb_V_0_sel_wr <= not(p_src_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    p_src_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((p_src_V_strb_V_0_state = ap_const_lv2_2) and (p_src_V_strb_V_0_vld_in = ap_const_logic_0)) or ((p_src_V_strb_V_0_state = ap_const_lv2_3) and (p_src_V_strb_V_0_vld_in = ap_const_logic_0) and (p_src_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    p_src_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((p_src_V_strb_V_0_state = ap_const_lv2_1) and (p_src_V_strb_V_0_ack_out = ap_const_logic_0)) or ((p_src_V_strb_V_0_state = ap_const_lv2_3) and (p_src_V_strb_V_0_ack_out = ap_const_logic_0) and (p_src_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    p_src_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((p_src_V_strb_V_0_vld_in = ap_const_logic_0) and (p_src_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((p_src_V_strb_V_0_ack_out = ap_const_logic_0) and (p_src_V_strb_V_0_vld_in = ap_const_logic_1))) and (p_src_V_strb_V_0_state = ap_const_lv2_3)) or ((p_src_V_strb_V_0_state = ap_const_lv2_1) and (p_src_V_strb_V_0_ack_out = ap_const_logic_1)) or ((p_src_V_strb_V_0_state = ap_const_lv2_2) and (p_src_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    p_src_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    p_src_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_src_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((p_src_V_user_V_0_ack_out = ap_const_logic_1) and (p_src_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        p_src_V_user_V_0_sel_rd <= not(p_src_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    p_src_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((p_src_V_user_V_0_ack_in = ap_const_logic_1) and (p_src_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        p_src_V_user_V_0_sel_wr <= not(p_src_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    p_src_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                p_src_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((p_src_V_user_V_0_state = ap_const_lv2_2) and (p_src_V_user_V_0_vld_in = ap_const_logic_0)) or ((p_src_V_user_V_0_state = ap_const_lv2_3) and (p_src_V_user_V_0_vld_in = ap_const_logic_0) and (p_src_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    p_src_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((p_src_V_user_V_0_state = ap_const_lv2_1) and (p_src_V_user_V_0_ack_out = ap_const_logic_0)) or ((p_src_V_user_V_0_state = ap_const_lv2_3) and (p_src_V_user_V_0_ack_out = ap_const_logic_0) and (p_src_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    p_src_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((p_src_V_user_V_0_vld_in = ap_const_logic_0) and (p_src_V_user_V_0_ack_out = ap_const_logic_1))) and not(((p_src_V_user_V_0_ack_out = ap_const_logic_0) and (p_src_V_user_V_0_vld_in = ap_const_logic_1))) and (p_src_V_user_V_0_state = ap_const_lv2_3)) or ((p_src_V_user_V_0_state = ap_const_lv2_1) and (p_src_V_user_V_0_ack_out = ap_const_logic_1)) or ((p_src_V_user_V_0_state = ap_const_lv2_2) and (p_src_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    p_src_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    p_src_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                height_read_reg_148 <= height;
                width_read_reg_141 <= width;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_dst_V_data_V_1_load_A = ap_const_logic_1)) then
                p_dst_V_data_V_1_payload_A <= grp_xfMat2AXIvideo_fu_97_p_dst_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_dst_V_data_V_1_load_B = ap_const_logic_1)) then
                p_dst_V_data_V_1_payload_B <= grp_xfMat2AXIvideo_fu_97_p_dst_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_dst_V_dest_V_1_load_A = ap_const_logic_1)) then
                p_dst_V_dest_V_1_payload_A <= grp_xfMat2AXIvideo_fu_97_p_dst_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_dst_V_dest_V_1_load_B = ap_const_logic_1)) then
                p_dst_V_dest_V_1_payload_B <= grp_xfMat2AXIvideo_fu_97_p_dst_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_dst_V_id_V_1_load_A = ap_const_logic_1)) then
                p_dst_V_id_V_1_payload_A <= grp_xfMat2AXIvideo_fu_97_p_dst_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_dst_V_id_V_1_load_B = ap_const_logic_1)) then
                p_dst_V_id_V_1_payload_B <= grp_xfMat2AXIvideo_fu_97_p_dst_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_dst_V_keep_V_1_load_A = ap_const_logic_1)) then
                p_dst_V_keep_V_1_payload_A <= grp_xfMat2AXIvideo_fu_97_p_dst_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_dst_V_keep_V_1_load_B = ap_const_logic_1)) then
                p_dst_V_keep_V_1_payload_B <= grp_xfMat2AXIvideo_fu_97_p_dst_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_dst_V_last_V_1_load_A = ap_const_logic_1)) then
                p_dst_V_last_V_1_payload_A <= grp_xfMat2AXIvideo_fu_97_p_dst_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_dst_V_last_V_1_load_B = ap_const_logic_1)) then
                p_dst_V_last_V_1_payload_B <= grp_xfMat2AXIvideo_fu_97_p_dst_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_dst_V_strb_V_1_load_A = ap_const_logic_1)) then
                p_dst_V_strb_V_1_payload_A <= grp_xfMat2AXIvideo_fu_97_p_dst_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_dst_V_strb_V_1_load_B = ap_const_logic_1)) then
                p_dst_V_strb_V_1_payload_B <= grp_xfMat2AXIvideo_fu_97_p_dst_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_dst_V_user_V_1_load_A = ap_const_logic_1)) then
                p_dst_V_user_V_1_payload_A <= grp_xfMat2AXIvideo_fu_97_p_dst_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_dst_V_user_V_1_load_B = ap_const_logic_1)) then
                p_dst_V_user_V_1_payload_B <= grp_xfMat2AXIvideo_fu_97_p_dst_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_src_V_data_V_0_load_A = ap_const_logic_1)) then
                p_src_V_data_V_0_payload_A <= p_src_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_src_V_data_V_0_load_B = ap_const_logic_1)) then
                p_src_V_data_V_0_payload_B <= p_src_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_src_V_dest_V_0_load_A = ap_const_logic_1)) then
                p_src_V_dest_V_0_payload_A <= p_src_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_src_V_dest_V_0_load_B = ap_const_logic_1)) then
                p_src_V_dest_V_0_payload_B <= p_src_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_src_V_id_V_0_load_A = ap_const_logic_1)) then
                p_src_V_id_V_0_payload_A <= p_src_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_src_V_id_V_0_load_B = ap_const_logic_1)) then
                p_src_V_id_V_0_payload_B <= p_src_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_src_V_keep_V_0_load_A = ap_const_logic_1)) then
                p_src_V_keep_V_0_payload_A <= p_src_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_src_V_keep_V_0_load_B = ap_const_logic_1)) then
                p_src_V_keep_V_0_payload_B <= p_src_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_src_V_last_V_0_load_A = ap_const_logic_1)) then
                p_src_V_last_V_0_payload_A <= p_src_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_src_V_last_V_0_load_B = ap_const_logic_1)) then
                p_src_V_last_V_0_payload_B <= p_src_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_src_V_strb_V_0_load_A = ap_const_logic_1)) then
                p_src_V_strb_V_0_payload_A <= p_src_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_src_V_strb_V_0_load_B = ap_const_logic_1)) then
                p_src_V_strb_V_0_payload_B <= p_src_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_src_V_user_V_0_load_A = ap_const_logic_1)) then
                p_src_V_user_V_0_payload_A <= p_src_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((p_src_V_user_V_0_load_B = ap_const_logic_1)) then
                p_src_V_user_V_0_payload_B <= p_src_TUSER;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, p_dst_TREADY, p_dst_V_data_V_1_state, p_dst_V_keep_V_1_state, p_dst_V_strb_V_1_state, p_dst_V_user_V_1_state, p_dst_V_last_V_1_state, p_dst_V_id_V_1_state, p_dst_V_dest_V_1_state, grp_Sobel_fu_88_ap_done, grp_xfMat2AXIvideo_fu_97_ap_done, grp_AXIvideo2xfMat_fu_118_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_AXIvideo2xfMat_fu_118_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_Sobel_fu_88_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_xfMat2AXIvideo_fu_97_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((p_dst_V_dest_V_1_state = ap_const_lv2_1) or (p_dst_V_id_V_1_state = ap_const_lv2_1) or (p_dst_V_last_V_1_state = ap_const_lv2_1) or (p_dst_V_user_V_1_state = ap_const_lv2_1) or (p_dst_V_strb_V_1_state = ap_const_lv2_1) or (p_dst_V_keep_V_1_state = ap_const_lv2_1) or (p_dst_V_data_V_1_state = ap_const_lv2_1) or ((p_dst_V_dest_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_id_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_last_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_user_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_strb_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_keep_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_data_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state8_assign_proc : process(p_dst_TREADY, p_dst_V_data_V_1_state, p_dst_V_keep_V_1_state, p_dst_V_strb_V_1_state, p_dst_V_user_V_1_state, p_dst_V_last_V_1_state, p_dst_V_id_V_1_state, p_dst_V_dest_V_1_state)
    begin
                ap_block_state8 <= ((p_dst_V_dest_V_1_state = ap_const_lv2_1) or (p_dst_V_id_V_1_state = ap_const_lv2_1) or (p_dst_V_last_V_1_state = ap_const_lv2_1) or (p_dst_V_user_V_1_state = ap_const_lv2_1) or (p_dst_V_strb_V_1_state = ap_const_lv2_1) or (p_dst_V_keep_V_1_state = ap_const_lv2_1) or (p_dst_V_data_V_1_state = ap_const_lv2_1) or ((p_dst_V_dest_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_id_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_last_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_user_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_strb_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_keep_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_data_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(p_dst_TREADY, p_dst_V_data_V_1_state, p_dst_V_keep_V_1_state, p_dst_V_strb_V_1_state, p_dst_V_user_V_1_state, p_dst_V_last_V_1_state, p_dst_V_id_V_1_state, p_dst_V_dest_V_1_state, ap_CS_fsm_state8)
    begin
        if ((not(((p_dst_V_dest_V_1_state = ap_const_lv2_1) or (p_dst_V_id_V_1_state = ap_const_lv2_1) or (p_dst_V_last_V_1_state = ap_const_lv2_1) or (p_dst_V_user_V_1_state = ap_const_lv2_1) or (p_dst_V_strb_V_1_state = ap_const_lv2_1) or (p_dst_V_keep_V_1_state = ap_const_lv2_1) or (p_dst_V_data_V_1_state = ap_const_lv2_1) or ((p_dst_V_dest_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_id_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_last_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_user_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_strb_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_keep_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_data_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(p_dst_TREADY, p_dst_V_data_V_1_state, p_dst_V_keep_V_1_state, p_dst_V_strb_V_1_state, p_dst_V_user_V_1_state, p_dst_V_last_V_1_state, p_dst_V_id_V_1_state, p_dst_V_dest_V_1_state, ap_CS_fsm_state8)
    begin
        if ((not(((p_dst_V_dest_V_1_state = ap_const_lv2_1) or (p_dst_V_id_V_1_state = ap_const_lv2_1) or (p_dst_V_last_V_1_state = ap_const_lv2_1) or (p_dst_V_user_V_1_state = ap_const_lv2_1) or (p_dst_V_strb_V_1_state = ap_const_lv2_1) or (p_dst_V_keep_V_1_state = ap_const_lv2_1) or (p_dst_V_data_V_1_state = ap_const_lv2_1) or ((p_dst_V_dest_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_id_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_last_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_user_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_strb_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_keep_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)) or ((p_dst_V_data_V_1_state = ap_const_lv2_3) and (p_dst_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_AXIvideo2xfMat_fu_118_ap_start <= grp_AXIvideo2xfMat_fu_118_ap_start_reg;
    grp_AXIvideo2xfMat_fu_118_p_src_TVALID <= p_src_V_dest_V_0_state(0);
    grp_Sobel_fu_88_ap_start <= grp_Sobel_fu_88_ap_start_reg;
    grp_xfMat2AXIvideo_fu_97_ap_start <= grp_xfMat2AXIvideo_fu_97_ap_start_reg;
    grp_xfMat2AXIvideo_fu_97_p_dst_TREADY <= ((p_dst_V_dest_V_1_ack_in and ap_CS_fsm_state7) or (p_dst_V_id_V_1_ack_in and ap_CS_fsm_state7) or (p_dst_V_last_V_1_ack_in and ap_CS_fsm_state7) or (p_dst_V_user_V_1_ack_in and ap_CS_fsm_state7) or (p_dst_V_strb_V_1_ack_in and ap_CS_fsm_state7) or (p_dst_V_keep_V_1_ack_in and ap_CS_fsm_state7) or (p_dst_V_data_V_1_ack_in and ap_CS_fsm_state7));

    p_ImgInput_data_V_address0_assign_proc : process(grp_Sobel_fu_88_p_src_mat_data_V_address0, grp_AXIvideo2xfMat_fu_118_img_data_V_address0, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_ImgInput_data_V_address0 <= grp_AXIvideo2xfMat_fu_118_img_data_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_ImgInput_data_V_address0 <= grp_Sobel_fu_88_p_src_mat_data_V_address0;
        else 
            p_ImgInput_data_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    p_ImgInput_data_V_ce0_assign_proc : process(grp_Sobel_fu_88_p_src_mat_data_V_ce0, grp_AXIvideo2xfMat_fu_118_img_data_V_ce0, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_ImgInput_data_V_ce0 <= grp_AXIvideo2xfMat_fu_118_img_data_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_ImgInput_data_V_ce0 <= grp_Sobel_fu_88_p_src_mat_data_V_ce0;
        else 
            p_ImgInput_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ImgInput_data_V_we0_assign_proc : process(grp_AXIvideo2xfMat_fu_118_img_data_V_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_ImgInput_data_V_we0 <= grp_AXIvideo2xfMat_fu_118_img_data_V_we0;
        else 
            p_ImgInput_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ImgSobelx_data_V_address0_assign_proc : process(grp_Sobel_fu_88_p_dst_matx_data_V_address0, grp_xfMat2AXIvideo_fu_97_img_data_V_address0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_ImgSobelx_data_V_address0 <= grp_xfMat2AXIvideo_fu_97_img_data_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_ImgSobelx_data_V_address0 <= grp_Sobel_fu_88_p_dst_matx_data_V_address0;
        else 
            p_ImgSobelx_data_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    p_ImgSobelx_data_V_ce0_assign_proc : process(grp_Sobel_fu_88_p_dst_matx_data_V_ce0, grp_xfMat2AXIvideo_fu_97_img_data_V_ce0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_ImgSobelx_data_V_ce0 <= grp_xfMat2AXIvideo_fu_97_img_data_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_ImgSobelx_data_V_ce0 <= grp_Sobel_fu_88_p_dst_matx_data_V_ce0;
        else 
            p_ImgSobelx_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ImgSobelx_data_V_we0_assign_proc : process(grp_Sobel_fu_88_p_dst_matx_data_V_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_ImgSobelx_data_V_we0 <= grp_Sobel_fu_88_p_dst_matx_data_V_we0;
        else 
            p_ImgSobelx_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_dst_TDATA <= p_dst_V_data_V_1_data_out;
    p_dst_TDEST <= p_dst_V_dest_V_1_data_out;
    p_dst_TID <= p_dst_V_id_V_1_data_out;
    p_dst_TKEEP <= p_dst_V_keep_V_1_data_out;
    p_dst_TLAST <= p_dst_V_last_V_1_data_out;
    p_dst_TSTRB <= p_dst_V_strb_V_1_data_out;
    p_dst_TUSER <= p_dst_V_user_V_1_data_out;
    p_dst_TVALID <= p_dst_V_dest_V_1_state(0);
    p_dst_V_data_V_1_ack_in <= p_dst_V_data_V_1_state(1);
    p_dst_V_data_V_1_ack_out <= p_dst_TREADY;

    p_dst_V_data_V_1_data_out_assign_proc : process(p_dst_V_data_V_1_payload_A, p_dst_V_data_V_1_payload_B, p_dst_V_data_V_1_sel)
    begin
        if ((p_dst_V_data_V_1_sel = ap_const_logic_1)) then 
            p_dst_V_data_V_1_data_out <= p_dst_V_data_V_1_payload_B;
        else 
            p_dst_V_data_V_1_data_out <= p_dst_V_data_V_1_payload_A;
        end if; 
    end process;

    p_dst_V_data_V_1_load_A <= (p_dst_V_data_V_1_state_cmp_full and not(p_dst_V_data_V_1_sel_wr));
    p_dst_V_data_V_1_load_B <= (p_dst_V_data_V_1_state_cmp_full and p_dst_V_data_V_1_sel_wr);
    p_dst_V_data_V_1_sel <= p_dst_V_data_V_1_sel_rd;
    p_dst_V_data_V_1_state_cmp_full <= '0' when (p_dst_V_data_V_1_state = ap_const_lv2_1) else '1';
    p_dst_V_data_V_1_vld_in <= grp_xfMat2AXIvideo_fu_97_p_dst_TVALID;
    p_dst_V_data_V_1_vld_out <= p_dst_V_data_V_1_state(0);
    p_dst_V_dest_V_1_ack_in <= p_dst_V_dest_V_1_state(1);
    p_dst_V_dest_V_1_ack_out <= p_dst_TREADY;

    p_dst_V_dest_V_1_data_out_assign_proc : process(p_dst_V_dest_V_1_payload_A, p_dst_V_dest_V_1_payload_B, p_dst_V_dest_V_1_sel)
    begin
        if ((p_dst_V_dest_V_1_sel = ap_const_logic_1)) then 
            p_dst_V_dest_V_1_data_out <= p_dst_V_dest_V_1_payload_B;
        else 
            p_dst_V_dest_V_1_data_out <= p_dst_V_dest_V_1_payload_A;
        end if; 
    end process;

    p_dst_V_dest_V_1_load_A <= (p_dst_V_dest_V_1_state_cmp_full and not(p_dst_V_dest_V_1_sel_wr));
    p_dst_V_dest_V_1_load_B <= (p_dst_V_dest_V_1_state_cmp_full and p_dst_V_dest_V_1_sel_wr);
    p_dst_V_dest_V_1_sel <= p_dst_V_dest_V_1_sel_rd;
    p_dst_V_dest_V_1_state_cmp_full <= '0' when (p_dst_V_dest_V_1_state = ap_const_lv2_1) else '1';
    p_dst_V_dest_V_1_vld_in <= grp_xfMat2AXIvideo_fu_97_p_dst_TVALID;
    p_dst_V_dest_V_1_vld_out <= p_dst_V_dest_V_1_state(0);
    p_dst_V_id_V_1_ack_in <= p_dst_V_id_V_1_state(1);
    p_dst_V_id_V_1_ack_out <= p_dst_TREADY;

    p_dst_V_id_V_1_data_out_assign_proc : process(p_dst_V_id_V_1_payload_A, p_dst_V_id_V_1_payload_B, p_dst_V_id_V_1_sel)
    begin
        if ((p_dst_V_id_V_1_sel = ap_const_logic_1)) then 
            p_dst_V_id_V_1_data_out <= p_dst_V_id_V_1_payload_B;
        else 
            p_dst_V_id_V_1_data_out <= p_dst_V_id_V_1_payload_A;
        end if; 
    end process;

    p_dst_V_id_V_1_load_A <= (p_dst_V_id_V_1_state_cmp_full and not(p_dst_V_id_V_1_sel_wr));
    p_dst_V_id_V_1_load_B <= (p_dst_V_id_V_1_state_cmp_full and p_dst_V_id_V_1_sel_wr);
    p_dst_V_id_V_1_sel <= p_dst_V_id_V_1_sel_rd;
    p_dst_V_id_V_1_state_cmp_full <= '0' when (p_dst_V_id_V_1_state = ap_const_lv2_1) else '1';
    p_dst_V_id_V_1_vld_in <= grp_xfMat2AXIvideo_fu_97_p_dst_TVALID;
    p_dst_V_id_V_1_vld_out <= p_dst_V_id_V_1_state(0);
    p_dst_V_keep_V_1_ack_in <= p_dst_V_keep_V_1_state(1);
    p_dst_V_keep_V_1_ack_out <= p_dst_TREADY;

    p_dst_V_keep_V_1_data_out_assign_proc : process(p_dst_V_keep_V_1_payload_A, p_dst_V_keep_V_1_payload_B, p_dst_V_keep_V_1_sel)
    begin
        if ((p_dst_V_keep_V_1_sel = ap_const_logic_1)) then 
            p_dst_V_keep_V_1_data_out <= p_dst_V_keep_V_1_payload_B;
        else 
            p_dst_V_keep_V_1_data_out <= p_dst_V_keep_V_1_payload_A;
        end if; 
    end process;

    p_dst_V_keep_V_1_load_A <= (p_dst_V_keep_V_1_state_cmp_full and not(p_dst_V_keep_V_1_sel_wr));
    p_dst_V_keep_V_1_load_B <= (p_dst_V_keep_V_1_state_cmp_full and p_dst_V_keep_V_1_sel_wr);
    p_dst_V_keep_V_1_sel <= p_dst_V_keep_V_1_sel_rd;
    p_dst_V_keep_V_1_state_cmp_full <= '0' when (p_dst_V_keep_V_1_state = ap_const_lv2_1) else '1';
    p_dst_V_keep_V_1_vld_in <= grp_xfMat2AXIvideo_fu_97_p_dst_TVALID;
    p_dst_V_keep_V_1_vld_out <= p_dst_V_keep_V_1_state(0);
    p_dst_V_last_V_1_ack_in <= p_dst_V_last_V_1_state(1);
    p_dst_V_last_V_1_ack_out <= p_dst_TREADY;

    p_dst_V_last_V_1_data_out_assign_proc : process(p_dst_V_last_V_1_payload_A, p_dst_V_last_V_1_payload_B, p_dst_V_last_V_1_sel)
    begin
        if ((p_dst_V_last_V_1_sel = ap_const_logic_1)) then 
            p_dst_V_last_V_1_data_out <= p_dst_V_last_V_1_payload_B;
        else 
            p_dst_V_last_V_1_data_out <= p_dst_V_last_V_1_payload_A;
        end if; 
    end process;

    p_dst_V_last_V_1_load_A <= (p_dst_V_last_V_1_state_cmp_full and not(p_dst_V_last_V_1_sel_wr));
    p_dst_V_last_V_1_load_B <= (p_dst_V_last_V_1_state_cmp_full and p_dst_V_last_V_1_sel_wr);
    p_dst_V_last_V_1_sel <= p_dst_V_last_V_1_sel_rd;
    p_dst_V_last_V_1_state_cmp_full <= '0' when (p_dst_V_last_V_1_state = ap_const_lv2_1) else '1';
    p_dst_V_last_V_1_vld_in <= grp_xfMat2AXIvideo_fu_97_p_dst_TVALID;
    p_dst_V_last_V_1_vld_out <= p_dst_V_last_V_1_state(0);
    p_dst_V_strb_V_1_ack_in <= p_dst_V_strb_V_1_state(1);
    p_dst_V_strb_V_1_ack_out <= p_dst_TREADY;

    p_dst_V_strb_V_1_data_out_assign_proc : process(p_dst_V_strb_V_1_payload_A, p_dst_V_strb_V_1_payload_B, p_dst_V_strb_V_1_sel)
    begin
        if ((p_dst_V_strb_V_1_sel = ap_const_logic_1)) then 
            p_dst_V_strb_V_1_data_out <= p_dst_V_strb_V_1_payload_B;
        else 
            p_dst_V_strb_V_1_data_out <= p_dst_V_strb_V_1_payload_A;
        end if; 
    end process;

    p_dst_V_strb_V_1_load_A <= (p_dst_V_strb_V_1_state_cmp_full and not(p_dst_V_strb_V_1_sel_wr));
    p_dst_V_strb_V_1_load_B <= (p_dst_V_strb_V_1_state_cmp_full and p_dst_V_strb_V_1_sel_wr);
    p_dst_V_strb_V_1_sel <= p_dst_V_strb_V_1_sel_rd;
    p_dst_V_strb_V_1_state_cmp_full <= '0' when (p_dst_V_strb_V_1_state = ap_const_lv2_1) else '1';
    p_dst_V_strb_V_1_vld_in <= grp_xfMat2AXIvideo_fu_97_p_dst_TVALID;
    p_dst_V_strb_V_1_vld_out <= p_dst_V_strb_V_1_state(0);
    p_dst_V_user_V_1_ack_in <= p_dst_V_user_V_1_state(1);
    p_dst_V_user_V_1_ack_out <= p_dst_TREADY;

    p_dst_V_user_V_1_data_out_assign_proc : process(p_dst_V_user_V_1_payload_A, p_dst_V_user_V_1_payload_B, p_dst_V_user_V_1_sel)
    begin
        if ((p_dst_V_user_V_1_sel = ap_const_logic_1)) then 
            p_dst_V_user_V_1_data_out <= p_dst_V_user_V_1_payload_B;
        else 
            p_dst_V_user_V_1_data_out <= p_dst_V_user_V_1_payload_A;
        end if; 
    end process;

    p_dst_V_user_V_1_load_A <= (p_dst_V_user_V_1_state_cmp_full and not(p_dst_V_user_V_1_sel_wr));
    p_dst_V_user_V_1_load_B <= (p_dst_V_user_V_1_state_cmp_full and p_dst_V_user_V_1_sel_wr);
    p_dst_V_user_V_1_sel <= p_dst_V_user_V_1_sel_rd;
    p_dst_V_user_V_1_state_cmp_full <= '0' when (p_dst_V_user_V_1_state = ap_const_lv2_1) else '1';
    p_dst_V_user_V_1_vld_in <= grp_xfMat2AXIvideo_fu_97_p_dst_TVALID;
    p_dst_V_user_V_1_vld_out <= p_dst_V_user_V_1_state(0);
    p_src_TREADY <= p_src_V_dest_V_0_state(1);
    p_src_V_data_V_0_ack_in <= p_src_V_data_V_0_state(1);

    p_src_V_data_V_0_ack_out_assign_proc : process(grp_AXIvideo2xfMat_fu_118_p_src_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_src_V_data_V_0_ack_out <= grp_AXIvideo2xfMat_fu_118_p_src_TREADY;
        else 
            p_src_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    p_src_V_data_V_0_data_out_assign_proc : process(p_src_V_data_V_0_payload_A, p_src_V_data_V_0_payload_B, p_src_V_data_V_0_sel)
    begin
        if ((p_src_V_data_V_0_sel = ap_const_logic_1)) then 
            p_src_V_data_V_0_data_out <= p_src_V_data_V_0_payload_B;
        else 
            p_src_V_data_V_0_data_out <= p_src_V_data_V_0_payload_A;
        end if; 
    end process;

    p_src_V_data_V_0_load_A <= (p_src_V_data_V_0_state_cmp_full and not(p_src_V_data_V_0_sel_wr));
    p_src_V_data_V_0_load_B <= (p_src_V_data_V_0_state_cmp_full and p_src_V_data_V_0_sel_wr);
    p_src_V_data_V_0_sel <= p_src_V_data_V_0_sel_rd;
    p_src_V_data_V_0_state_cmp_full <= '0' when (p_src_V_data_V_0_state = ap_const_lv2_1) else '1';
    p_src_V_data_V_0_vld_in <= p_src_TVALID;
    p_src_V_data_V_0_vld_out <= p_src_V_data_V_0_state(0);
    p_src_V_dest_V_0_ack_in <= p_src_V_dest_V_0_state(1);

    p_src_V_dest_V_0_ack_out_assign_proc : process(grp_AXIvideo2xfMat_fu_118_p_src_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_src_V_dest_V_0_ack_out <= grp_AXIvideo2xfMat_fu_118_p_src_TREADY;
        else 
            p_src_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    p_src_V_dest_V_0_data_out_assign_proc : process(p_src_V_dest_V_0_payload_A, p_src_V_dest_V_0_payload_B, p_src_V_dest_V_0_sel)
    begin
        if ((p_src_V_dest_V_0_sel = ap_const_logic_1)) then 
            p_src_V_dest_V_0_data_out <= p_src_V_dest_V_0_payload_B;
        else 
            p_src_V_dest_V_0_data_out <= p_src_V_dest_V_0_payload_A;
        end if; 
    end process;

    p_src_V_dest_V_0_load_A <= (p_src_V_dest_V_0_state_cmp_full and not(p_src_V_dest_V_0_sel_wr));
    p_src_V_dest_V_0_load_B <= (p_src_V_dest_V_0_state_cmp_full and p_src_V_dest_V_0_sel_wr);
    p_src_V_dest_V_0_sel <= p_src_V_dest_V_0_sel_rd;
    p_src_V_dest_V_0_state_cmp_full <= '0' when (p_src_V_dest_V_0_state = ap_const_lv2_1) else '1';
    p_src_V_dest_V_0_vld_in <= p_src_TVALID;
    p_src_V_dest_V_0_vld_out <= p_src_V_dest_V_0_state(0);
    p_src_V_id_V_0_ack_in <= p_src_V_id_V_0_state(1);

    p_src_V_id_V_0_ack_out_assign_proc : process(grp_AXIvideo2xfMat_fu_118_p_src_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_src_V_id_V_0_ack_out <= grp_AXIvideo2xfMat_fu_118_p_src_TREADY;
        else 
            p_src_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    p_src_V_id_V_0_data_out_assign_proc : process(p_src_V_id_V_0_payload_A, p_src_V_id_V_0_payload_B, p_src_V_id_V_0_sel)
    begin
        if ((p_src_V_id_V_0_sel = ap_const_logic_1)) then 
            p_src_V_id_V_0_data_out <= p_src_V_id_V_0_payload_B;
        else 
            p_src_V_id_V_0_data_out <= p_src_V_id_V_0_payload_A;
        end if; 
    end process;

    p_src_V_id_V_0_load_A <= (p_src_V_id_V_0_state_cmp_full and not(p_src_V_id_V_0_sel_wr));
    p_src_V_id_V_0_load_B <= (p_src_V_id_V_0_state_cmp_full and p_src_V_id_V_0_sel_wr);
    p_src_V_id_V_0_sel <= p_src_V_id_V_0_sel_rd;
    p_src_V_id_V_0_state_cmp_full <= '0' when (p_src_V_id_V_0_state = ap_const_lv2_1) else '1';
    p_src_V_id_V_0_vld_in <= p_src_TVALID;
    p_src_V_id_V_0_vld_out <= p_src_V_id_V_0_state(0);
    p_src_V_keep_V_0_ack_in <= p_src_V_keep_V_0_state(1);

    p_src_V_keep_V_0_ack_out_assign_proc : process(grp_AXIvideo2xfMat_fu_118_p_src_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_src_V_keep_V_0_ack_out <= grp_AXIvideo2xfMat_fu_118_p_src_TREADY;
        else 
            p_src_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    p_src_V_keep_V_0_data_out_assign_proc : process(p_src_V_keep_V_0_payload_A, p_src_V_keep_V_0_payload_B, p_src_V_keep_V_0_sel)
    begin
        if ((p_src_V_keep_V_0_sel = ap_const_logic_1)) then 
            p_src_V_keep_V_0_data_out <= p_src_V_keep_V_0_payload_B;
        else 
            p_src_V_keep_V_0_data_out <= p_src_V_keep_V_0_payload_A;
        end if; 
    end process;

    p_src_V_keep_V_0_load_A <= (p_src_V_keep_V_0_state_cmp_full and not(p_src_V_keep_V_0_sel_wr));
    p_src_V_keep_V_0_load_B <= (p_src_V_keep_V_0_state_cmp_full and p_src_V_keep_V_0_sel_wr);
    p_src_V_keep_V_0_sel <= p_src_V_keep_V_0_sel_rd;
    p_src_V_keep_V_0_state_cmp_full <= '0' when (p_src_V_keep_V_0_state = ap_const_lv2_1) else '1';
    p_src_V_keep_V_0_vld_in <= p_src_TVALID;
    p_src_V_keep_V_0_vld_out <= p_src_V_keep_V_0_state(0);
    p_src_V_last_V_0_ack_in <= p_src_V_last_V_0_state(1);

    p_src_V_last_V_0_ack_out_assign_proc : process(grp_AXIvideo2xfMat_fu_118_p_src_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_src_V_last_V_0_ack_out <= grp_AXIvideo2xfMat_fu_118_p_src_TREADY;
        else 
            p_src_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    p_src_V_last_V_0_data_out_assign_proc : process(p_src_V_last_V_0_payload_A, p_src_V_last_V_0_payload_B, p_src_V_last_V_0_sel)
    begin
        if ((p_src_V_last_V_0_sel = ap_const_logic_1)) then 
            p_src_V_last_V_0_data_out <= p_src_V_last_V_0_payload_B;
        else 
            p_src_V_last_V_0_data_out <= p_src_V_last_V_0_payload_A;
        end if; 
    end process;

    p_src_V_last_V_0_load_A <= (p_src_V_last_V_0_state_cmp_full and not(p_src_V_last_V_0_sel_wr));
    p_src_V_last_V_0_load_B <= (p_src_V_last_V_0_state_cmp_full and p_src_V_last_V_0_sel_wr);
    p_src_V_last_V_0_sel <= p_src_V_last_V_0_sel_rd;
    p_src_V_last_V_0_state_cmp_full <= '0' when (p_src_V_last_V_0_state = ap_const_lv2_1) else '1';
    p_src_V_last_V_0_vld_in <= p_src_TVALID;
    p_src_V_last_V_0_vld_out <= p_src_V_last_V_0_state(0);
    p_src_V_strb_V_0_ack_in <= p_src_V_strb_V_0_state(1);

    p_src_V_strb_V_0_ack_out_assign_proc : process(grp_AXIvideo2xfMat_fu_118_p_src_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_src_V_strb_V_0_ack_out <= grp_AXIvideo2xfMat_fu_118_p_src_TREADY;
        else 
            p_src_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    p_src_V_strb_V_0_data_out_assign_proc : process(p_src_V_strb_V_0_payload_A, p_src_V_strb_V_0_payload_B, p_src_V_strb_V_0_sel)
    begin
        if ((p_src_V_strb_V_0_sel = ap_const_logic_1)) then 
            p_src_V_strb_V_0_data_out <= p_src_V_strb_V_0_payload_B;
        else 
            p_src_V_strb_V_0_data_out <= p_src_V_strb_V_0_payload_A;
        end if; 
    end process;

    p_src_V_strb_V_0_load_A <= (p_src_V_strb_V_0_state_cmp_full and not(p_src_V_strb_V_0_sel_wr));
    p_src_V_strb_V_0_load_B <= (p_src_V_strb_V_0_state_cmp_full and p_src_V_strb_V_0_sel_wr);
    p_src_V_strb_V_0_sel <= p_src_V_strb_V_0_sel_rd;
    p_src_V_strb_V_0_state_cmp_full <= '0' when (p_src_V_strb_V_0_state = ap_const_lv2_1) else '1';
    p_src_V_strb_V_0_vld_in <= p_src_TVALID;
    p_src_V_strb_V_0_vld_out <= p_src_V_strb_V_0_state(0);
    p_src_V_user_V_0_ack_in <= p_src_V_user_V_0_state(1);

    p_src_V_user_V_0_ack_out_assign_proc : process(grp_AXIvideo2xfMat_fu_118_p_src_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_src_V_user_V_0_ack_out <= grp_AXIvideo2xfMat_fu_118_p_src_TREADY;
        else 
            p_src_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    p_src_V_user_V_0_data_out_assign_proc : process(p_src_V_user_V_0_payload_A, p_src_V_user_V_0_payload_B, p_src_V_user_V_0_sel)
    begin
        if ((p_src_V_user_V_0_sel = ap_const_logic_1)) then 
            p_src_V_user_V_0_data_out <= p_src_V_user_V_0_payload_B;
        else 
            p_src_V_user_V_0_data_out <= p_src_V_user_V_0_payload_A;
        end if; 
    end process;

    p_src_V_user_V_0_load_A <= (p_src_V_user_V_0_state_cmp_full and not(p_src_V_user_V_0_sel_wr));
    p_src_V_user_V_0_load_B <= (p_src_V_user_V_0_state_cmp_full and p_src_V_user_V_0_sel_wr);
    p_src_V_user_V_0_sel <= p_src_V_user_V_0_sel_rd;
    p_src_V_user_V_0_state_cmp_full <= '0' when (p_src_V_user_V_0_state = ap_const_lv2_1) else '1';
    p_src_V_user_V_0_vld_in <= p_src_TVALID;
    p_src_V_user_V_0_vld_out <= p_src_V_user_V_0_state(0);
end behav;
