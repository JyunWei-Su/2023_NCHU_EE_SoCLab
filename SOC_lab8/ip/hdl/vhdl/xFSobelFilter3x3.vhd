-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xFSobelFilter3x3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_mat_data_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    p_src_mat_data_V_ce0 : OUT STD_LOGIC;
    p_src_mat_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_dst_matx_data_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    p_dst_matx_data_V_ce0 : OUT STD_LOGIC;
    p_dst_matx_data_V_we0 : OUT STD_LOGIC;
    p_dst_matx_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_maty_data_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    p_dst_maty_data_V_ce0 : OUT STD_LOGIC;
    p_dst_maty_data_V_we0 : OUT STD_LOGIC;
    p_dst_maty_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_height : IN STD_LOGIC_VECTOR (15 downto 0);
    img_width : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of xFSobelFilter3x3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv13_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal index_assign_reg_293 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_reg_304 : STD_LOGIC_VECTOR (12 downto 0);
    signal t_V_3_reg_351 : STD_LOGIC_VECTOR (12 downto 0);
    signal src_buf3_V_0_0_reg_363 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf2_0_V_reg_375 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf2_0_V_reg_375_pp1_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal src_buf2_V_0_0_reg_387 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf3_0_V_reg_400 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf3_0_V_reg_400_pp1_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf1_0_V_reg_413 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf1_0_V_reg_413_pp1_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_buf1_V_0_0_reg_425 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_assign_1_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_assign_1_reg_438_pp1_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal write_index_2_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_index_2_fu_518_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_index_2_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln316_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln316_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal read_index_fu_527_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln544_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_reg_867 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_V_fu_543_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln326_fu_552_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln326_reg_907 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln887_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln879_fu_648_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln879_reg_916 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln879_2_fu_664_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln879_2_reg_921 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln879_4_fu_680_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln879_4_reg_926 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln887_1_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_1_reg_931 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln321_fu_693_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_reg_935 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln887_2_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_2_reg_939 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal icmp_ln887_2_reg_939_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_2_reg_939_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_2_reg_939_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_2_reg_939_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal col_V_1_fu_721_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_V_1_reg_943 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln544_1_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_reg_953 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln879_3_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_reg_960 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_reg_960_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_reg_960_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_reg_960_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal buf0_V_fu_762_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf0_V_reg_979 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal buf1_V_fu_773_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf1_V_reg_985 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf2_V_fu_784_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf2_V_reg_991 : STD_LOGIC_VECTOR (7 downto 0);
    signal GradientValuesX_0_V_reg_997 : STD_LOGIC_VECTOR (7 downto 0);
    signal GradientValuesY_0_V_reg_1002 : STD_LOGIC_VECTOR (7 downto 0);
    signal GradientValuesX_0_V_1_xFGradientX3x3_0_0_s_fu_478_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal GradientValuesX_0_V_1_reg_1007 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal GradientValuesY_0_V_1_xFGradientY3x3_0_0_s_fu_494_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal GradientValuesY_0_V_1_reg_1012 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln401_fu_821_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln401_reg_1017 : STD_LOGIC_VECTOR (12 downto 0);
    signal row_V_fu_829_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal row_V_reg_1022 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_510_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_condition_pp1_exit_iter3_state9 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal buf_0_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_0_V_ce0 : STD_LOGIC;
    signal buf_0_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_0_V_ce1 : STD_LOGIC;
    signal buf_0_V_we1 : STD_LOGIC;
    signal buf_0_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_1_V_ce0 : STD_LOGIC;
    signal buf_1_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_1_V_ce1 : STD_LOGIC;
    signal buf_1_V_we1 : STD_LOGIC;
    signal buf_1_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_2_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_2_V_ce0 : STD_LOGIC;
    signal buf_2_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_2_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_2_V_ce1 : STD_LOGIC;
    signal buf_2_V_we1 : STD_LOGIC;
    signal buf_2_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_xFSobel3x3_fu_461_ap_ready : STD_LOGIC;
    signal call_ret_xFSobel3x3_fu_461_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_xFSobel3x3_fu_461_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal GradientValuesX_0_V_1_xFGradientX3x3_0_0_s_fu_478_ap_ready : STD_LOGIC;
    signal GradientValuesY_0_V_1_xFGradientY3x3_0_0_s_fu_494_ap_ready : STD_LOGIC;
    signal write_index_0_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_1_reg_327 : STD_LOGIC_VECTOR (12 downto 0);
    signal t_V_2_reg_339 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_phi_mux_t_V_3_phi_fu_355_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_src_buf3_V_0_0_phi_fu_367_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_src_buf2_V_0_0_phi_fu_391_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_src_buf1_V_0_0_phi_fu_429_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_index_assign_1_phi_fu_441_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter3_write_index_2_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln621_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln621_1_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal buf_0_V_addr_1_gep_fu_207_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_1_V_addr_1_gep_fu_213_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_2_V_addr_gep_fu_219_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln650_1_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln650_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_01400_0_fu_92 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_01396_0_fu_96 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_01392_0_fu_100 : STD_LOGIC_VECTOR (1 downto 0);
    signal read_index_1_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_index_3_fu_730_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_510_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln326_fu_549_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln887_1_fu_562_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln879_2_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln879_fu_638_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln337_fu_602_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln879_1_fu_656_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln337_1_fu_610_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln879_3_fu_672_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln337_2_fu_618_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln887_fu_580_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln887_2_fu_712_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal row_ind_V_fu_809_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln879_4_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_condition_706 : BOOLEAN;
    signal ap_condition_710 : BOOLEAN;
    signal ap_condition_342 : BOOLEAN;

    component xFSobel3x3 IS
    port (
        ap_ready : OUT STD_LOGIC;
        src_buf1_0_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        src_buf1_1_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        src_buf1_2_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        src_buf2_0_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        src_buf2_2_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        src_buf3_0_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        src_buf3_1_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        src_buf3_2_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component xFGradientX3x3_0_0_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        t0_V : IN STD_LOGIC_VECTOR (7 downto 0);
        t2_V : IN STD_LOGIC_VECTOR (7 downto 0);
        m0_V : IN STD_LOGIC_VECTOR (7 downto 0);
        m2_V : IN STD_LOGIC_VECTOR (7 downto 0);
        b0_V : IN STD_LOGIC_VECTOR (7 downto 0);
        b2_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component xFGradientY3x3_0_0_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        t0_V : IN STD_LOGIC_VECTOR (7 downto 0);
        t1_V : IN STD_LOGIC_VECTOR (7 downto 0);
        t2_V : IN STD_LOGIC_VECTOR (7 downto 0);
        b0_V : IN STD_LOGIC_VECTOR (7 downto 0);
        b1_V : IN STD_LOGIC_VECTOR (7 downto 0);
        b2_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Sobel_Stream_mux_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component xFSobelFilter3x3_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    buf_0_V_U : component xFSobelFilter3x3_bkb
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_0_V_address0,
        ce0 => buf_0_V_ce0,
        q0 => buf_0_V_q0,
        address1 => buf_0_V_address1,
        ce1 => buf_0_V_ce1,
        we1 => buf_0_V_we1,
        d1 => buf_0_V_d1);

    buf_1_V_U : component xFSobelFilter3x3_bkb
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_1_V_address0,
        ce0 => buf_1_V_ce0,
        q0 => buf_1_V_q0,
        address1 => buf_1_V_address1,
        ce1 => buf_1_V_ce1,
        we1 => buf_1_V_we1,
        d1 => buf_1_V_d1);

    buf_2_V_U : component xFSobelFilter3x3_bkb
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_2_V_address0,
        ce0 => buf_2_V_ce0,
        q0 => buf_2_V_q0,
        address1 => buf_2_V_address1,
        ce1 => buf_2_V_ce1,
        we1 => buf_2_V_we1,
        d1 => buf_2_V_d1);

    call_ret_xFSobel3x3_fu_461 : component xFSobel3x3
    port map (
        ap_ready => call_ret_xFSobel3x3_fu_461_ap_ready,
        src_buf1_0_V_read => ap_phi_mux_src_buf1_V_0_0_phi_fu_429_p4,
        src_buf1_1_V_read => src_buf1_0_V_reg_413,
        src_buf1_2_V_read => buf0_V_reg_979,
        src_buf2_0_V_read => ap_phi_mux_src_buf2_V_0_0_phi_fu_391_p4,
        src_buf2_2_V_read => buf1_V_reg_985,
        src_buf3_0_V_read => ap_phi_mux_src_buf3_V_0_0_phi_fu_367_p4,
        src_buf3_1_V_read => src_buf3_0_V_reg_400,
        src_buf3_2_V_read => buf2_V_reg_991,
        ap_return_0 => call_ret_xFSobel3x3_fu_461_ap_return_0,
        ap_return_1 => call_ret_xFSobel3x3_fu_461_ap_return_1);

    GradientValuesX_0_V_1_xFGradientX3x3_0_0_s_fu_478 : component xFGradientX3x3_0_0_s
    port map (
        ap_ready => GradientValuesX_0_V_1_xFGradientX3x3_0_0_s_fu_478_ap_ready,
        t0_V => src_buf1_V_0_0_reg_425,
        t2_V => ap_const_lv8_0,
        m0_V => src_buf2_V_0_0_reg_387,
        m2_V => ap_const_lv8_0,
        b0_V => src_buf3_V_0_0_reg_363,
        b2_V => ap_const_lv8_0,
        ap_return => GradientValuesX_0_V_1_xFGradientX3x3_0_0_s_fu_478_ap_return);

    GradientValuesY_0_V_1_xFGradientY3x3_0_0_s_fu_494 : component xFGradientY3x3_0_0_s
    port map (
        ap_ready => GradientValuesY_0_V_1_xFGradientY3x3_0_0_s_fu_494_ap_ready,
        t0_V => src_buf1_V_0_0_reg_425,
        t1_V => src_buf1_0_V_reg_413,
        t2_V => ap_const_lv8_0,
        b0_V => src_buf3_V_0_0_reg_363,
        b1_V => src_buf3_0_V_reg_400,
        b2_V => ap_const_lv8_0,
        ap_return => GradientValuesY_0_V_1_xFGradientY3x3_0_0_s_fu_494_ap_return);

    Sobel_Stream_mux_eOg_U31 : component Sobel_Stream_mux_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_0_V_q0,
        din1 => buf_1_V_q0,
        din2 => buf_2_V_q0,
        din3 => select_ln879_reg_916,
        dout => buf0_V_fu_762_p5);

    Sobel_Stream_mux_eOg_U32 : component Sobel_Stream_mux_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_0_V_q0,
        din1 => buf_1_V_q0,
        din2 => buf_2_V_q0,
        din3 => select_ln879_2_reg_921,
        dout => buf1_V_fu_773_p5);

    Sobel_Stream_mux_eOg_U33 : component Sobel_Stream_mux_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_0_V_q0,
        din1 => buf_1_V_q0,
        din2 => buf_2_V_q0,
        din3 => select_ln879_4_reg_926,
        dout => buf2_V_fu_784_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_2_fu_716_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_fu_566_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter3_state9)) then 
                        ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter2;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_fu_566_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    index_assign_1_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln887_2_reg_939_pp1_iter3_reg = ap_const_lv1_1))) then 
                index_assign_1_reg_438 <= write_index_2_reg_449;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_fu_566_p2 = ap_const_lv1_1))) then 
                index_assign_1_reg_438 <= write_index_0_reg_315;
            end if; 
        end if;
    end process;

    index_assign_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln316_fu_522_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                index_assign_reg_293 <= read_index_fu_527_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                index_assign_reg_293 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    read_index_1_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_2_fu_716_p2 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_1))) then 
                read_index_1_fu_104 <= read_index_3_fu_730_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                read_index_1_fu_104 <= read_index_2_reg_853;
            end if; 
        end if;
    end process;

    src_buf1_0_V_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln887_2_reg_939_pp1_iter3_reg = ap_const_lv1_1))) then 
                src_buf1_0_V_reg_413 <= buf0_V_reg_979;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_fu_566_p2 = ap_const_lv1_1))) then 
                src_buf1_0_V_reg_413 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    src_buf1_V_0_0_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln887_2_reg_939_pp1_iter4_reg = ap_const_lv1_1))) then 
                src_buf1_V_0_0_reg_425 <= src_buf1_0_V_reg_413_pp1_iter4_reg;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_fu_566_p2 = ap_const_lv1_1))) then 
                src_buf1_V_0_0_reg_425 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    src_buf2_0_V_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln887_2_reg_939_pp1_iter3_reg = ap_const_lv1_1))) then 
                src_buf2_0_V_reg_375 <= buf1_V_reg_985;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_fu_566_p2 = ap_const_lv1_1))) then 
                src_buf2_0_V_reg_375 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    src_buf2_V_0_0_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln887_2_reg_939_pp1_iter4_reg = ap_const_lv1_1))) then 
                src_buf2_V_0_0_reg_387 <= src_buf2_0_V_reg_375_pp1_iter4_reg;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_fu_566_p2 = ap_const_lv1_1))) then 
                src_buf2_V_0_0_reg_387 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    src_buf3_0_V_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln887_2_reg_939_pp1_iter3_reg = ap_const_lv1_1))) then 
                src_buf3_0_V_reg_400 <= buf2_V_reg_991;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_fu_566_p2 = ap_const_lv1_1))) then 
                src_buf3_0_V_reg_400 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    src_buf3_V_0_0_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln887_2_reg_939_pp1_iter4_reg = ap_const_lv1_1))) then 
                src_buf3_V_0_0_reg_363 <= src_buf3_0_V_reg_400_pp1_iter4_reg;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_fu_566_p2 = ap_const_lv1_1))) then 
                src_buf3_V_0_0_reg_363 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    t_V_1_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                t_V_1_reg_327 <= select_ln401_reg_1017;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                t_V_1_reg_327 <= ap_const_lv13_2;
            end if; 
        end if;
    end process;

    t_V_2_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                t_V_2_reg_339 <= row_V_reg_1022;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                t_V_2_reg_339 <= ap_const_lv13_1;
            end if; 
        end if;
    end process;

    t_V_3_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1))) then 
                t_V_3_reg_351 <= col_V_1_reg_943;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_fu_566_p2 = ap_const_lv1_1))) then 
                t_V_3_reg_351 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    t_V_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln316_fu_522_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_reg_304 <= col_V_fu_543_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_reg_304 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    write_index_0_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                write_index_0_reg_315 <= grp_fu_510_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_index_0_reg_315 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    write_index_2_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then
                if (((icmp_ln879_3_reg_960_pp1_iter2_reg = ap_const_lv1_1) and (icmp_ln887_2_reg_939_pp1_iter2_reg = ap_const_lv1_1))) then 
                    write_index_2_reg_449 <= ap_phi_mux_index_assign_1_phi_fu_441_p4;
                elsif (((icmp_ln887_2_reg_939_pp1_iter2_reg = ap_const_lv1_1) and (icmp_ln879_3_reg_960_pp1_iter2_reg = ap_const_lv1_0))) then 
                    write_index_2_reg_449 <= grp_fu_510_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    write_index_2_reg_449 <= ap_phi_reg_pp1_iter3_write_index_2_reg_449;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                GradientValuesX_0_V_1_reg_1007 <= GradientValuesX_0_V_1_xFGradientX3x3_0_0_s_fu_478_ap_return;
                GradientValuesY_0_V_1_reg_1012 <= GradientValuesY_0_V_1_xFGradientY3x3_0_0_s_fu_494_ap_return;
                row_V_reg_1022 <= row_V_fu_829_p2;
                select_ln401_reg_1017 <= select_ln401_fu_821_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln887_2_reg_939_pp1_iter3_reg = ap_const_lv1_1))) then
                GradientValuesX_0_V_reg_997 <= call_ret_xFSobel3x3_fu_461_ap_return_0;
                GradientValuesY_0_V_reg_1002 <= call_ret_xFSobel3x3_fu_461_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln326_reg_907 <= add_ln326_fu_552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln887_2_reg_939_pp1_iter2_reg = ap_const_lv1_1))) then
                buf0_V_reg_979 <= buf0_V_fu_762_p5;
                buf1_V_reg_985 <= buf1_V_fu_773_p5;
                buf2_V_reg_991 <= buf2_V_fu_784_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                col_V_1_reg_943 <= col_V_1_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln316_reg_858 <= icmp_ln316_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1))) then
                icmp_ln879_3_reg_960 <= icmp_ln879_3_fu_756_p2;
                    zext_ln544_1_reg_953(12 downto 0) <= zext_ln544_1_fu_746_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln879_3_reg_960_pp1_iter2_reg <= icmp_ln879_3_reg_960;
                icmp_ln879_3_reg_960_pp1_iter3_reg <= icmp_ln879_3_reg_960_pp1_iter2_reg;
                icmp_ln879_3_reg_960_pp1_iter4_reg <= icmp_ln879_3_reg_960_pp1_iter3_reg;
                icmp_ln887_2_reg_939_pp1_iter2_reg <= icmp_ln887_2_reg_939_pp1_iter1_reg;
                icmp_ln887_2_reg_939_pp1_iter3_reg <= icmp_ln887_2_reg_939_pp1_iter2_reg;
                icmp_ln887_2_reg_939_pp1_iter4_reg <= icmp_ln887_2_reg_939_pp1_iter3_reg;
                index_assign_1_reg_438_pp1_iter4_reg <= index_assign_1_reg_438;
                src_buf1_0_V_reg_413_pp1_iter4_reg <= src_buf1_0_V_reg_413;
                src_buf2_0_V_reg_375_pp1_iter4_reg <= src_buf2_0_V_reg_375;
                src_buf3_0_V_reg_400_pp1_iter4_reg <= src_buf3_0_V_reg_400;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_fu_566_p2 = ap_const_lv1_1))) then
                icmp_ln887_1_reg_931 <= icmp_ln887_1_fu_688_p2;
                p_01392_0_fu_100 <= select_ln879_fu_648_p3;
                p_01396_0_fu_96 <= select_ln879_2_fu_664_p3;
                p_01400_0_fu_92 <= select_ln879_4_fu_680_p3;
                select_ln879_2_reg_921 <= select_ln879_2_fu_664_p3;
                select_ln879_4_reg_926 <= select_ln879_4_fu_680_p3;
                select_ln879_reg_916 <= select_ln879_fu_648_p3;
                trunc_ln321_reg_935 <= trunc_ln321_fu_693_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln887_2_reg_939 <= icmp_ln887_2_fu_716_p2;
                icmp_ln887_2_reg_939_pp1_iter1_reg <= icmp_ln887_2_reg_939;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    read_index_2_reg_853(15 downto 0) <= read_index_2_fu_518_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln316_fu_522_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln544_reg_867(12 downto 0) <= zext_ln544_fu_533_p1(12 downto 0);
            end if;
        end if;
    end process;
    read_index_2_reg_853(31 downto 16) <= "0000000000000000";
    zext_ln544_reg_867(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln544_1_reg_953(63 downto 13) <= "000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln316_fu_522_p2, ap_enable_reg_pp0_iter0, icmp_ln887_fu_566_p2, ap_CS_fsm_state5, ap_enable_reg_pp1_iter3, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln316_fu_522_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln316_fu_522_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_fu_566_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln326_fu_552_p2 <= std_logic_vector(unsigned(zext_ln326_fu_549_p1) + unsigned(ap_const_lv17_1));
    and_ln879_fu_632_p2 <= (xor_ln879_fu_626_p2 and icmp_ln879_1_fu_590_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(5);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_342_assign_proc : process(icmp_ln887_2_reg_939, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
                ap_condition_342 <= ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1));
    end process;


    ap_condition_706_assign_proc : process(select_ln879_4_reg_926, icmp_ln887_1_reg_931)
    begin
                ap_condition_706 <= (not((select_ln879_4_reg_926 = ap_const_lv2_1)) and not((select_ln879_4_reg_926 = ap_const_lv2_0)) and (icmp_ln887_1_reg_931 = ap_const_lv1_0));
    end process;


    ap_condition_710_assign_proc : process(icmp_ln887_1_reg_931, trunc_ln321_reg_935)
    begin
                ap_condition_710 <= (not((trunc_ln321_reg_935 = ap_const_lv2_1)) and not((trunc_ln321_reg_935 = ap_const_lv2_0)) and (icmp_ln887_1_reg_931 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln316_fu_522_p2)
    begin
        if ((icmp_ln316_fu_522_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter3_state9_assign_proc : process(ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            ap_condition_pp1_exit_iter3_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter3_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln887_fu_566_p2, ap_CS_fsm_state5)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_fu_566_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_index_assign_1_phi_fu_441_p4_assign_proc : process(index_assign_1_reg_438, write_index_2_reg_449, icmp_ln887_2_reg_939_pp1_iter3_reg, ap_enable_reg_pp1_iter4, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln887_2_reg_939_pp1_iter3_reg = ap_const_lv1_1))) then 
            ap_phi_mux_index_assign_1_phi_fu_441_p4 <= write_index_2_reg_449;
        else 
            ap_phi_mux_index_assign_1_phi_fu_441_p4 <= index_assign_1_reg_438;
        end if; 
    end process;


    ap_phi_mux_src_buf1_V_0_0_phi_fu_429_p4_assign_proc : process(src_buf1_0_V_reg_413_pp1_iter4_reg, src_buf1_V_0_0_reg_425, icmp_ln887_2_reg_939_pp1_iter4_reg, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln887_2_reg_939_pp1_iter4_reg = ap_const_lv1_1))) then 
            ap_phi_mux_src_buf1_V_0_0_phi_fu_429_p4 <= src_buf1_0_V_reg_413_pp1_iter4_reg;
        else 
            ap_phi_mux_src_buf1_V_0_0_phi_fu_429_p4 <= src_buf1_V_0_0_reg_425;
        end if; 
    end process;


    ap_phi_mux_src_buf2_V_0_0_phi_fu_391_p4_assign_proc : process(src_buf2_0_V_reg_375_pp1_iter4_reg, src_buf2_V_0_0_reg_387, icmp_ln887_2_reg_939_pp1_iter4_reg, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln887_2_reg_939_pp1_iter4_reg = ap_const_lv1_1))) then 
            ap_phi_mux_src_buf2_V_0_0_phi_fu_391_p4 <= src_buf2_0_V_reg_375_pp1_iter4_reg;
        else 
            ap_phi_mux_src_buf2_V_0_0_phi_fu_391_p4 <= src_buf2_V_0_0_reg_387;
        end if; 
    end process;


    ap_phi_mux_src_buf3_V_0_0_phi_fu_367_p4_assign_proc : process(src_buf3_V_0_0_reg_363, src_buf3_0_V_reg_400_pp1_iter4_reg, icmp_ln887_2_reg_939_pp1_iter4_reg, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln887_2_reg_939_pp1_iter4_reg = ap_const_lv1_1))) then 
            ap_phi_mux_src_buf3_V_0_0_phi_fu_367_p4 <= src_buf3_0_V_reg_400_pp1_iter4_reg;
        else 
            ap_phi_mux_src_buf3_V_0_0_phi_fu_367_p4 <= src_buf3_V_0_0_reg_363;
        end if; 
    end process;


    ap_phi_mux_t_V_3_phi_fu_355_p4_assign_proc : process(t_V_3_reg_351, icmp_ln887_2_reg_939, ap_CS_fsm_pp1_stage0, col_V_1_reg_943, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1))) then 
            ap_phi_mux_t_V_3_phi_fu_355_p4 <= col_V_1_reg_943;
        else 
            ap_phi_mux_t_V_3_phi_fu_355_p4 <= t_V_3_reg_351;
        end if; 
    end process;

    ap_phi_reg_pp1_iter3_write_index_2_reg_449 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(icmp_ln887_fu_566_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_fu_566_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buf_0_V_addr_1_gep_fu_207_p3 <= zext_ln544_1_fu_746_p1(6 - 1 downto 0);
    buf_0_V_address0 <= zext_ln544_1_reg_953(6 - 1 downto 0);

    buf_0_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln544_fu_533_p1, select_ln879_4_reg_926, icmp_ln887_1_reg_931, trunc_ln321_reg_935, icmp_ln887_2_reg_939, ap_CS_fsm_pp1_stage0, zext_ln544_1_fu_746_p1, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, buf_0_V_addr_1_gep_fu_207_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (trunc_ln321_reg_935 = ap_const_lv2_0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_1))) then 
            buf_0_V_address1 <= buf_0_V_addr_1_gep_fu_207_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (select_ln879_4_reg_926 = ap_const_lv2_0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_0))) then 
            buf_0_V_address1 <= zext_ln544_1_fu_746_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            buf_0_V_address1 <= zext_ln544_fu_533_p1(6 - 1 downto 0);
        else 
            buf_0_V_address1 <= "XXXXXX";
        end if; 
    end process;


    buf_0_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            buf_0_V_ce0 <= ap_const_logic_1;
        else 
            buf_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_V_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, select_ln879_4_reg_926, icmp_ln887_1_reg_931, trunc_ln321_reg_935, icmp_ln887_2_reg_939, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (select_ln879_4_reg_926 = ap_const_lv2_0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (trunc_ln321_reg_935 = ap_const_lv2_0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_1)))) then 
            buf_0_V_ce1 <= ap_const_logic_1;
        else 
            buf_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_0_V_d1_assign_proc : process(p_src_mat_data_V_q0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, select_ln879_4_reg_926, icmp_ln887_1_reg_931, trunc_ln321_reg_935, icmp_ln887_2_reg_939, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (trunc_ln321_reg_935 = ap_const_lv2_0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_1))) then 
            buf_0_V_d1 <= p_src_mat_data_V_q0;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (select_ln879_4_reg_926 = ap_const_lv2_0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_0)))) then 
            buf_0_V_d1 <= ap_const_lv8_0;
        else 
            buf_0_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_0_V_we1_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln316_fu_522_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, select_ln879_4_reg_926, icmp_ln887_1_reg_931, trunc_ln321_reg_935, icmp_ln887_2_reg_939, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1)
    begin
        if ((((icmp_ln316_fu_522_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (select_ln879_4_reg_926 = ap_const_lv2_0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (trunc_ln321_reg_935 = ap_const_lv2_0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_1)))) then 
            buf_0_V_we1 <= ap_const_logic_1;
        else 
            buf_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_V_addr_1_gep_fu_213_p3 <= zext_ln544_1_fu_746_p1(6 - 1 downto 0);
    buf_1_V_address0 <= zext_ln544_1_reg_953(6 - 1 downto 0);

    buf_1_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln544_reg_867, select_ln879_4_reg_926, icmp_ln887_1_reg_931, trunc_ln321_reg_935, icmp_ln887_2_reg_939, ap_CS_fsm_pp1_stage0, zext_ln544_1_fu_746_p1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, buf_1_V_addr_1_gep_fu_213_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (trunc_ln321_reg_935 = ap_const_lv2_1) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_1))) then 
            buf_1_V_address1 <= buf_1_V_addr_1_gep_fu_213_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (select_ln879_4_reg_926 = ap_const_lv2_1) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_0))) then 
            buf_1_V_address1 <= zext_ln544_1_fu_746_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buf_1_V_address1 <= zext_ln544_reg_867(6 - 1 downto 0);
        else 
            buf_1_V_address1 <= "XXXXXX";
        end if; 
    end process;


    buf_1_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            buf_1_V_ce0 <= ap_const_logic_1;
        else 
            buf_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_V_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, select_ln879_4_reg_926, icmp_ln887_1_reg_931, trunc_ln321_reg_935, icmp_ln887_2_reg_939, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (select_ln879_4_reg_926 = ap_const_lv2_1) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (trunc_ln321_reg_935 = ap_const_lv2_1) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_1)))) then 
            buf_1_V_ce1 <= ap_const_logic_1;
        else 
            buf_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_1_V_d1_assign_proc : process(p_src_mat_data_V_q0, ap_CS_fsm_pp0_stage0, select_ln879_4_reg_926, icmp_ln887_1_reg_931, trunc_ln321_reg_935, icmp_ln887_2_reg_939, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (select_ln879_4_reg_926 = ap_const_lv2_1) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_0))) then 
            buf_1_V_d1 <= ap_const_lv8_0;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (trunc_ln321_reg_935 = ap_const_lv2_1) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_1)))) then 
            buf_1_V_d1 <= p_src_mat_data_V_q0;
        else 
            buf_1_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_1_V_we1_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln316_reg_858, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, select_ln879_4_reg_926, icmp_ln887_1_reg_931, trunc_ln321_reg_935, icmp_ln887_2_reg_939, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if ((((icmp_ln316_reg_858 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (select_ln879_4_reg_926 = ap_const_lv2_1) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (trunc_ln321_reg_935 = ap_const_lv2_1) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_1)))) then 
            buf_1_V_we1 <= ap_const_logic_1;
        else 
            buf_1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_V_addr_gep_fu_219_p3 <= zext_ln544_1_fu_746_p1(6 - 1 downto 0);
    buf_2_V_address0 <= zext_ln544_1_reg_953(6 - 1 downto 0);

    buf_2_V_address1_assign_proc : process(zext_ln544_1_fu_746_p1, buf_2_V_addr_gep_fu_219_p3, ap_condition_706, ap_condition_710, ap_condition_342)
    begin
        if ((ap_const_boolean_1 = ap_condition_342)) then
            if ((ap_const_boolean_1 = ap_condition_710)) then 
                buf_2_V_address1 <= buf_2_V_addr_gep_fu_219_p3;
            elsif ((ap_const_boolean_1 = ap_condition_706)) then 
                buf_2_V_address1 <= zext_ln544_1_fu_746_p1(6 - 1 downto 0);
            else 
                buf_2_V_address1 <= "XXXXXX";
            end if;
        else 
            buf_2_V_address1 <= "XXXXXX";
        end if; 
    end process;


    buf_2_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            buf_2_V_ce0 <= ap_const_logic_1;
        else 
            buf_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2_V_ce1_assign_proc : process(ap_block_pp1_stage0_11001, select_ln879_4_reg_926, icmp_ln887_1_reg_931, trunc_ln321_reg_935, icmp_ln887_2_reg_939, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1)
    begin
        if (((not((select_ln879_4_reg_926 = ap_const_lv2_1)) and not((select_ln879_4_reg_926 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_0)) or (not((trunc_ln321_reg_935 = ap_const_lv2_1)) and not((trunc_ln321_reg_935 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_1)))) then 
            buf_2_V_ce1 <= ap_const_logic_1;
        else 
            buf_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2_V_d1_assign_proc : process(p_src_mat_data_V_q0, ap_condition_706, ap_condition_710, ap_condition_342)
    begin
        if ((ap_const_boolean_1 = ap_condition_342)) then
            if ((ap_const_boolean_1 = ap_condition_710)) then 
                buf_2_V_d1 <= p_src_mat_data_V_q0;
            elsif ((ap_const_boolean_1 = ap_condition_706)) then 
                buf_2_V_d1 <= ap_const_lv8_0;
            else 
                buf_2_V_d1 <= "XXXXXXXX";
            end if;
        else 
            buf_2_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_2_V_we1_assign_proc : process(ap_block_pp1_stage0_11001, select_ln879_4_reg_926, icmp_ln887_1_reg_931, trunc_ln321_reg_935, icmp_ln887_2_reg_939, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1)
    begin
        if (((not((select_ln879_4_reg_926 = ap_const_lv2_1)) and not((select_ln879_4_reg_926 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_0)) or (not((trunc_ln321_reg_935 = ap_const_lv2_1)) and not((trunc_ln321_reg_935 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_2_reg_939 = ap_const_lv1_1) and (icmp_ln887_1_reg_931 = ap_const_lv1_1)))) then 
            buf_2_V_we1 <= ap_const_logic_1;
        else 
            buf_2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    col_V_1_fu_721_p2 <= std_logic_vector(unsigned(ap_phi_mux_t_V_3_phi_fu_355_p4) + unsigned(ap_const_lv13_1));
    col_V_fu_543_p2 <= std_logic_vector(unsigned(t_V_reg_304) + unsigned(ap_const_lv13_1));

    grp_fu_510_p0_assign_proc : process(index_assign_1_reg_438, ap_enable_reg_pp1_iter3, ap_CS_fsm_state13, ap_block_pp1_stage0, ap_phi_mux_index_assign_1_phi_fu_441_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_510_p0 <= index_assign_1_reg_438;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            grp_fu_510_p0 <= ap_phi_mux_index_assign_1_phi_fu_441_p4;
        else 
            grp_fu_510_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_510_p2 <= std_logic_vector(signed(grp_fu_510_p0) + signed(ap_const_lv32_1));
    icmp_ln316_fu_522_p2 <= "1" when (index_assign_reg_293 = img_width) else "0";
    icmp_ln879_1_fu_590_p2 <= "1" when (t_V_1_reg_327 = ap_const_lv13_0) else "0";
    icmp_ln879_2_fu_596_p2 <= "1" when (t_V_1_reg_327 = ap_const_lv13_1) else "0";
    icmp_ln879_3_fu_756_p2 <= "1" when (t_V_3_reg_351 = ap_const_lv13_0) else "0";
    icmp_ln879_4_fu_815_p2 <= "1" when (row_ind_V_fu_809_p2 = ap_const_lv13_3) else "0";
    icmp_ln879_fu_584_p2 <= "1" when (t_V_1_reg_327 = ap_const_lv13_2) else "0";
    icmp_ln887_1_fu_688_p2 <= "1" when (unsigned(zext_ln887_fu_580_p1) < unsigned(img_height)) else "0";
    icmp_ln887_2_fu_716_p2 <= "1" when (unsigned(zext_ln887_2_fu_712_p1) < unsigned(img_width)) else "0";
    icmp_ln887_fu_566_p2 <= "1" when (unsigned(zext_ln887_1_fu_562_p1) < unsigned(add_ln326_reg_907)) else "0";
    or_ln879_fu_642_p2 <= (icmp_ln879_fu_584_p2 or and_ln879_fu_632_p2);

    p_dst_matx_data_V_address0_assign_proc : process(ap_CS_fsm_state13, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0, sext_ln650_1_fu_803_p1, sext_ln650_fu_835_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_dst_matx_data_V_address0 <= sext_ln650_fu_835_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            p_dst_matx_data_V_address0 <= sext_ln650_1_fu_803_p1(12 - 1 downto 0);
        else 
            p_dst_matx_data_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    p_dst_matx_data_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state13, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)))) then 
            p_dst_matx_data_V_ce0 <= ap_const_logic_1;
        else 
            p_dst_matx_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_dst_matx_data_V_d0_assign_proc : process(GradientValuesX_0_V_reg_997, GradientValuesX_0_V_1_reg_1007, ap_CS_fsm_state13, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_dst_matx_data_V_d0 <= GradientValuesX_0_V_1_reg_1007;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            p_dst_matx_data_V_d0 <= GradientValuesX_0_V_reg_997;
        else 
            p_dst_matx_data_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    p_dst_matx_data_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln887_2_reg_939_pp1_iter4_reg, icmp_ln879_3_reg_960_pp1_iter4_reg, ap_CS_fsm_state13, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln887_2_reg_939_pp1_iter4_reg = ap_const_lv1_1) and (icmp_ln879_3_reg_960_pp1_iter4_reg = ap_const_lv1_0)))) then 
            p_dst_matx_data_V_we0 <= ap_const_logic_1;
        else 
            p_dst_matx_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_dst_maty_data_V_address0_assign_proc : process(ap_CS_fsm_state13, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0, sext_ln650_1_fu_803_p1, sext_ln650_fu_835_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_dst_maty_data_V_address0 <= sext_ln650_fu_835_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            p_dst_maty_data_V_address0 <= sext_ln650_1_fu_803_p1(12 - 1 downto 0);
        else 
            p_dst_maty_data_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    p_dst_maty_data_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state13, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)))) then 
            p_dst_maty_data_V_ce0 <= ap_const_logic_1;
        else 
            p_dst_maty_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_dst_maty_data_V_d0_assign_proc : process(GradientValuesY_0_V_reg_1002, GradientValuesY_0_V_1_reg_1012, ap_CS_fsm_state13, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_dst_maty_data_V_d0 <= GradientValuesY_0_V_1_reg_1012;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            p_dst_maty_data_V_d0 <= GradientValuesY_0_V_reg_1002;
        else 
            p_dst_maty_data_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    p_dst_maty_data_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln887_2_reg_939_pp1_iter4_reg, icmp_ln879_3_reg_960_pp1_iter4_reg, ap_CS_fsm_state13, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln887_2_reg_939_pp1_iter4_reg = ap_const_lv1_1) and (icmp_ln879_3_reg_960_pp1_iter4_reg = ap_const_lv1_0)))) then 
            p_dst_maty_data_V_we0 <= ap_const_logic_1;
        else 
            p_dst_maty_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_src_mat_data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_block_pp0_stage0, zext_ln621_fu_538_p1, zext_ln621_1_fu_736_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            p_src_mat_data_V_address0 <= zext_ln621_1_fu_736_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            p_src_mat_data_V_address0 <= zext_ln621_fu_538_p1(12 - 1 downto 0);
        else 
            p_src_mat_data_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    p_src_mat_data_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            p_src_mat_data_V_ce0 <= ap_const_logic_1;
        else 
            p_src_mat_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    read_index_2_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_width),32));
    read_index_3_fu_730_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(read_index_1_fu_104));
    read_index_fu_527_p2 <= std_logic_vector(unsigned(index_assign_reg_293) + unsigned(ap_const_lv16_1));
    row_V_fu_829_p2 <= std_logic_vector(unsigned(t_V_2_reg_339) + unsigned(ap_const_lv13_1));
    row_ind_V_fu_809_p2 <= std_logic_vector(unsigned(t_V_1_reg_327) + unsigned(ap_const_lv13_1));
    select_ln337_1_fu_610_p3 <= 
        ap_const_lv2_0 when (icmp_ln879_2_fu_596_p2(0) = '1') else 
        p_01396_0_fu_96;
    select_ln337_2_fu_618_p3 <= 
        ap_const_lv2_1 when (icmp_ln879_2_fu_596_p2(0) = '1') else 
        p_01400_0_fu_92;
    select_ln337_fu_602_p3 <= 
        ap_const_lv2_2 when (icmp_ln879_2_fu_596_p2(0) = '1') else 
        p_01392_0_fu_100;
    select_ln401_fu_821_p3 <= 
        ap_const_lv13_0 when (icmp_ln879_4_fu_815_p2(0) = '1') else 
        row_ind_V_fu_809_p2;
    select_ln879_1_fu_656_p3 <= 
        ap_const_lv2_2 when (and_ln879_fu_632_p2(0) = '1') else 
        ap_const_lv2_1;
    select_ln879_2_fu_664_p3 <= 
        select_ln879_1_fu_656_p3 when (or_ln879_fu_642_p2(0) = '1') else 
        select_ln337_1_fu_610_p3;
    select_ln879_3_fu_672_p3 <= 
        ap_const_lv2_0 when (and_ln879_fu_632_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln879_4_fu_680_p3 <= 
        select_ln879_3_fu_672_p3 when (or_ln879_fu_642_p2(0) = '1') else 
        select_ln337_2_fu_618_p3;
    select_ln879_fu_648_p3 <= 
        zext_ln879_fu_638_p1 when (or_ln879_fu_642_p2(0) = '1') else 
        select_ln337_fu_602_p3;
        sext_ln650_1_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_assign_1_reg_438_pp1_iter4_reg),64));

        sext_ln650_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_assign_1_reg_438),64));

    trunc_ln321_fu_693_p1 <= t_V_1_reg_327(2 - 1 downto 0);
    xor_ln879_fu_626_p2 <= (icmp_ln879_fu_584_p2 xor ap_const_lv1_1);
    zext_ln326_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_height),17));
    zext_ln544_1_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_3_reg_351),64));
    zext_ln544_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_304),64));
    zext_ln621_1_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(read_index_1_fu_104),64));
    zext_ln621_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_assign_reg_293),64));
    zext_ln879_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln879_fu_632_p2),2));
    zext_ln887_1_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_2_reg_339),17));
    zext_ln887_2_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_3_phi_fu_355_p4),16));
    zext_ln887_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_2_reg_339),16));
end behav;
