-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXIvideo2xfMat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_TVALID : IN STD_LOGIC;
    p_src_TREADY : OUT STD_LOGIC;
    p_src_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    img_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
    img_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
    img_data_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    img_data_V_ce0 : OUT STD_LOGIC;
    img_data_V_we0 : OUT STD_LOGIC;
    img_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of AXIvideo2xfMat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln129_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln132_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_eol_2_phi_fu_264_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_reg_382 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_last_V_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal smax_cast_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_cast_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln127_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_319_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_411 : STD_LOGIC_VECTOR (30 downto 0);
    signal val_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_339_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_predicate_op60_read_state5 : BOOLEAN;
    signal ap_block_state5 : BOOLEAN;
    signal add_ln151_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state7 : BOOLEAN;
    signal axi_last_V_0_reg_113 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_3_reg_237 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal axi_data_V_0_reg_123 : STD_LOGIC_VECTOR (7 downto 0);
    signal axi_data_V_3_reg_249 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_0_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_145 : STD_LOGIC_VECTOR (30 downto 0);
    signal eol_reg_156 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_axi_last_V_2_phi_fu_216_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_reg_167 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_Val2_s_phi_fu_228_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_assign_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_0_reg_188 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_200 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal eol_2_reg_261 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln650_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sof_1_fu_66 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_25_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_fu_290_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax_fu_293_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln127_fu_310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln134_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_user_V_fu_281_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    axi_data_V_0_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                axi_data_V_0_reg_123 <= axi_data_V_3_reg_249;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_data_V_0_reg_123 <= tmp_data_V_reg_382;
            end if; 
        end if;
    end process;

    axi_data_V_1_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_src_TVALID = ap_const_logic_0) and (ap_predicate_op60_read_state5 = ap_const_boolean_1))) and (icmp_ln129_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                axi_data_V_1_reg_167 <= ap_phi_mux_p_Val2_s_phi_fu_228_p4;
            elsif (((icmp_ln127_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                axi_data_V_1_reg_167 <= axi_data_V_0_reg_123;
            end if; 
        end if;
    end process;

    axi_data_V_3_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                axi_data_V_3_reg_249 <= axi_data_V_1_reg_167;
            elsif ((not(((eol_2_reg_261 = ap_const_lv1_0) and (p_src_TVALID = ap_const_logic_0))) and (eol_2_reg_261 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                axi_data_V_3_reg_249 <= p_src_TDATA;
            end if; 
        end if;
    end process;

    axi_last_V_0_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                axi_last_V_0_reg_113 <= axi_last_V_3_reg_237;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_last_V_0_reg_113 <= tmp_last_V_reg_390;
            end if; 
        end if;
    end process;

    axi_last_V_3_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                axi_last_V_3_reg_237 <= eol_reg_156;
            elsif ((not(((eol_2_reg_261 = ap_const_lv1_0) and (p_src_TVALID = ap_const_logic_0))) and (eol_2_reg_261 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                axi_last_V_3_reg_237 <= p_src_TLAST;
            end if; 
        end if;
    end process;

    eol_0_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_src_TVALID = ap_const_logic_0) and (ap_predicate_op60_read_state5 = ap_const_boolean_1))) and (icmp_ln129_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                eol_0_reg_188 <= ap_phi_mux_axi_last_V_2_phi_fu_216_p4;
            elsif (((icmp_ln127_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                eol_0_reg_188 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    eol_2_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                eol_2_reg_261 <= eol_0_reg_188;
            elsif ((not(((eol_2_reg_261 = ap_const_lv1_0) and (p_src_TVALID = ap_const_logic_0))) and (eol_2_reg_261 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                eol_2_reg_261 <= p_src_TLAST;
            end if; 
        end if;
    end process;

    eol_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_src_TVALID = ap_const_logic_0) and (ap_predicate_op60_read_state5 = ap_const_boolean_1))) and (icmp_ln129_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                eol_reg_156 <= ap_phi_mux_axi_last_V_2_phi_fu_216_p4;
            elsif (((icmp_ln127_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                eol_reg_156 <= axi_last_V_0_reg_113;
            end if; 
        end if;
    end process;

    i_0_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_reg_145 <= i_reg_411;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_145 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_0_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_src_TVALID = ap_const_logic_0) and (ap_predicate_op60_read_state5 = ap_const_boolean_1))) and (icmp_ln129_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_0_reg_200 <= j_fu_339_p2;
            elsif (((icmp_ln127_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_200 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    sof_1_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_src_TVALID = ap_const_logic_0) and (ap_predicate_op60_read_state5 = ap_const_boolean_1))) and (icmp_ln129_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sof_1_fu_66 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sof_1_fu_66 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    val_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                val_0_reg_133 <= val_reg_416;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                val_0_reg_133 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    val_assign_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_src_TVALID = ap_const_logic_0) and (ap_predicate_op60_read_state5 = ap_const_boolean_1))) and (icmp_ln129_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                val_assign_reg_178 <= add_ln151_fu_359_p2;
            elsif (((icmp_ln127_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                val_assign_reg_178 <= val_0_reg_133;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_411 <= i_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    smax_cast_reg_402(30 downto 0) <= smax_cast_fu_301_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_src_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_V_reg_382 <= p_src_TDATA;
                tmp_last_V_reg_390 <= p_src_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln127_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                val_reg_416 <= val_fu_325_p2;
            end if;
        end if;
    end process;
    smax_cast_reg_402(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, p_src_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state5, icmp_ln129_fu_334_p2, ap_CS_fsm_state7, ap_phi_mux_eol_2_phi_fu_264_p4, icmp_ln127_fu_314_p2, ap_CS_fsm_state4, ap_predicate_op60_read_state5, eol_2_reg_261, tmp_user_V_fu_281_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_user_V_fu_281_p1 = ap_const_lv1_0) and (p_src_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((tmp_user_V_fu_281_p1 = ap_const_lv1_1) and (p_src_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln127_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((p_src_TVALID = ap_const_logic_0) and (ap_predicate_op60_read_state5 = ap_const_boolean_1))) and (icmp_ln129_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not(((p_src_TVALID = ap_const_logic_0) and (ap_predicate_op60_read_state5 = ap_const_boolean_1))) and (icmp_ln129_fu_334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if ((not(((eol_2_reg_261 = ap_const_lv1_0) and (p_src_TVALID = ap_const_logic_0))) and (eol_2_reg_261 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((eol_2_reg_261 = ap_const_lv1_0) and (p_src_TVALID = ap_const_logic_0))) and (ap_phi_mux_eol_2_phi_fu_264_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln151_fu_359_p2 <= std_logic_vector(signed(val_assign_reg_178) + signed(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state5_assign_proc : process(p_src_TVALID, ap_predicate_op60_read_state5)
    begin
                ap_block_state5 <= ((p_src_TVALID = ap_const_logic_0) and (ap_predicate_op60_read_state5 = ap_const_boolean_1));
    end process;


    ap_block_state7_assign_proc : process(p_src_TVALID, eol_2_reg_261)
    begin
                ap_block_state7 <= ((eol_2_reg_261 = ap_const_lv1_0) and (p_src_TVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln127_fu_314_p2, ap_CS_fsm_state4)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln127_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_axi_last_V_2_phi_fu_216_p4_assign_proc : process(p_src_TLAST, ap_CS_fsm_state5, icmp_ln129_fu_334_p2, or_ln132_fu_348_p2, eol_reg_156)
    begin
        if (((icmp_ln129_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
            if ((or_ln132_fu_348_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_axi_last_V_2_phi_fu_216_p4 <= eol_reg_156;
            elsif ((or_ln132_fu_348_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_axi_last_V_2_phi_fu_216_p4 <= p_src_TLAST;
            else 
                ap_phi_mux_axi_last_V_2_phi_fu_216_p4 <= "X";
            end if;
        else 
            ap_phi_mux_axi_last_V_2_phi_fu_216_p4 <= "X";
        end if; 
    end process;

    ap_phi_mux_eol_2_phi_fu_264_p4 <= eol_2_reg_261;

    ap_phi_mux_p_Val2_s_phi_fu_228_p4_assign_proc : process(p_src_TDATA, ap_CS_fsm_state5, icmp_ln129_fu_334_p2, or_ln132_fu_348_p2, axi_data_V_1_reg_167)
    begin
        if (((icmp_ln129_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
            if ((or_ln132_fu_348_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_p_Val2_s_phi_fu_228_p4 <= axi_data_V_1_reg_167;
            elsif ((or_ln132_fu_348_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_p_Val2_s_phi_fu_228_p4 <= p_src_TDATA;
            else 
                ap_phi_mux_p_Val2_s_phi_fu_228_p4 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_228_p4 <= "XXXXXXXX";
        end if; 
    end process;


    ap_predicate_op60_read_state5_assign_proc : process(icmp_ln129_fu_334_p2, or_ln132_fu_348_p2)
    begin
                ap_predicate_op60_read_state5 <= ((or_ln132_fu_348_p2 = ap_const_lv1_0) and (icmp_ln129_fu_334_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(icmp_ln127_fu_314_p2, ap_CS_fsm_state4)
    begin
        if (((icmp_ln127_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_25_fu_285_p2 <= "1" when (signed(img_cols_read) > signed(ap_const_lv32_0)) else "0";
    empty_26_fu_290_p1 <= img_cols_read(31 - 1 downto 0);
    i_fu_319_p2 <= std_logic_vector(unsigned(i_0_reg_145) + unsigned(ap_const_lv31_1));
    icmp_ln127_fu_314_p2 <= "1" when (signed(zext_ln127_fu_310_p1) < signed(img_rows_read)) else "0";
    icmp_ln129_fu_334_p2 <= "1" when (signed(zext_ln134_fu_330_p1) < signed(img_cols_read)) else "0";
    img_data_V_address0 <= sext_ln650_fu_354_p1(12 - 1 downto 0);

    img_data_V_ce0_assign_proc : process(p_src_TVALID, ap_CS_fsm_state5, ap_predicate_op60_read_state5)
    begin
        if ((not(((p_src_TVALID = ap_const_logic_0) and (ap_predicate_op60_read_state5 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            img_data_V_ce0 <= ap_const_logic_1;
        else 
            img_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    img_data_V_d0 <= ap_phi_mux_p_Val2_s_phi_fu_228_p4;

    img_data_V_we0_assign_proc : process(p_src_TVALID, ap_CS_fsm_state5, icmp_ln129_fu_334_p2, ap_predicate_op60_read_state5)
    begin
        if ((not(((p_src_TVALID = ap_const_logic_0) and (ap_predicate_op60_read_state5 = ap_const_boolean_1))) and (icmp_ln129_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            img_data_V_we0 <= ap_const_logic_1;
        else 
            img_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_339_p2 <= std_logic_vector(unsigned(j_0_reg_200) + unsigned(ap_const_lv31_1));
    or_ln132_fu_348_p2 <= (sof_1_fu_66 or eol_0_reg_188);

    p_src_TDATA_blk_n_assign_proc : process(p_src_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state5, icmp_ln129_fu_334_p2, or_ln132_fu_348_p2, ap_CS_fsm_state7, eol_2_reg_261)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((eol_2_reg_261 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((or_ln132_fu_348_p2 = ap_const_lv1_0) and (icmp_ln129_fu_334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            p_src_TDATA_blk_n <= p_src_TVALID;
        else 
            p_src_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_TREADY_assign_proc : process(p_src_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_predicate_op60_read_state5, eol_2_reg_261)
    begin
        if (((not(((eol_2_reg_261 = ap_const_lv1_0) and (p_src_TVALID = ap_const_logic_0))) and (eol_2_reg_261 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((p_src_TVALID = ap_const_logic_0) and (ap_predicate_op60_read_state5 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_predicate_op60_read_state5 = ap_const_boolean_1)) or ((p_src_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            p_src_TREADY <= ap_const_logic_1;
        else 
            p_src_TREADY <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln650_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(val_assign_reg_178),64));

    smax_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax_fu_293_p3),32));
    smax_fu_293_p3 <= 
        empty_26_fu_290_p1 when (empty_25_fu_285_p2(0) = '1') else 
        ap_const_lv31_0;
    tmp_user_V_fu_281_p1 <= p_src_TUSER;
    val_fu_325_p2 <= std_logic_vector(unsigned(smax_cast_reg_402) + unsigned(val_0_reg_133));
    zext_ln127_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_145),32));
    zext_ln134_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_200),32));
end behav;
